"angularVelocity"	physics
"length"	physics
"velocity"	physics
Array	type
Boolean	type
Constant	type
CoronaClass	type
EmitterObject:pause()	EmitterObject
EmitterObject:start()	EmitterObject
EmitterObject:stop()	EmitterObject
Event	type
File:close()	File
File:flush()	File
File:lines()	File
File:read( [fmt1] [, fmt2] [, ...] )	File
File:seek( [mode] [, offset] )	File
File:setvbuf( mode [, size ] )	File
File:write( arg1 [, arg2] [, ...] )	File
Function	type
Library	type
LineObject:append( x, y [, ... ] )	LineObject
Listener	type
MFiProfile	InputDevice
Number	type
Object	type
sqlite3 sql
ParticleSystem:createGroup( params )	ParticleSystem
ParticleSystem:createParticle( params )	ParticleSystem
ParticleSystem:destroyParticles( params )	ParticleSystem
ParticleSystem:queryRegion( upperLeftX, upperLeftY, lowerRightX, lowerRightY, hitProperties )	ParticleSystem
ParticleSystem:rayCast( from_x, from_y, to_x, to_y, behavior )	ParticleSystem
PhysicsContact.bounce	PhysicsContact
PhysicsContact.friction	PhysicsContact
PhysicsContact.isEnabled	PhysicsContact
PhysicsContact.isTouching	PhysicsContact
Recording:isRecording()	Recording
Recording:setSampleRate( r )	Recording
Runtime:hasEventSource( eventSourceName )	Runtime
Runtime:hideErrorAlerts()	Runtime
StageObject:setFocus( displayObject [, touchID] )	StageObject
String	type
Table	type
Userdata	type
\_defined	DisplayObject
\_lastChange	DisplayObject
\_properties	DisplayObject
accuracy	InputAxis
addEventListener( eventName, listener )	EventDispatcher
addMarker( latitude, longitude )	Map
addMarker( latitude, longitude, options )	Map
align	TextBox
align	TextField
allowsRotation	InputDevice
alpha	DisplayObject
anchorChildren	GroupObject
anchorSegments	LineObject
anchorX	DisplayObject
anchorY	DisplayObject
androidDeviceId	InputDevice
angularDamping	Body
angularVelocity	Body
applyAngularImpulse( appliedForce )	Body
applyForce( xForce, yForce, bodyX, bodyY )	Body
applyLinearImpulse( xForce, yForce, bodyX, bodyY )	Body
applyTorque( appliedForce )	Body
assert( v [, message] )	global
audio.dispose( audioHandle )	audio
audio.fade( [ { [channel=c] [, time=t] [, volume=v ] } ] )	audio
audio.fadeOut( [ { [channel=c] [, time=t] } ] )	audio
audio.findFreeChannel( [ startChannel ] )	audio
audio.freeChannels	audio
audio.getDuration( audioHandle )	audio
audio.getMaxVolume( { channel=c } )	audio
audio.getMinVolume( { channel=c } )	audio
audio.getVolume( { channel=c } )	audio
audio.isChannelActive( channel )	audio
audio.isChannelPaused( channel )	audio
audio.isChannelPlaying( channel )	audio
audio.loadSound( audiofileName [, baseDir ]  )	audio
audio.loadStream( audioFileName [, baseDir ]  )	audio
audio.pause( [channel] )	audio
audio.play( audioHandle [, options ] )	audio
audio.reserveChannels( channels )	audio
audio.reservedChannels	audio
audio.resume( [channel] )	audio
audio.rewind( [audioHandle | options] )	audio
audio.seek( time [, audioHandle ] [, options ] )	audio
audio.setMaxVolume( volume, options )	audio
audio.setMinVolume( volume, options )	audio
audio.setVolume( volume [, options ] )	audio
audio.stop( [channel] )	audio
audio.stopWithDelay( duration [, options ] )	audio
audio.totalChannels	audio
audio.unreservedFreeChannels	audio
audio.unreservedUsedChannels	audio
audio.usedChannels	audio
autocorrectionType	TextField
back()	WebView
baselineOffset	TextObject
blendMode	DisplayObject
bodyType	Body
canGoBack	WebView
canGoForward	WebView
canVibrate	InputDevice
collectgarbage( [opt [, arg]] )	global
composer.getScene( sceneName )	composer
composer.getSceneName( sceneType )	composer
composer.getVariable( variableName )	composer
composer.gotoScene( sceneName [, options] )	composer
composer.hideOverlay( [recycleOnly] [, effect] [, time] )	composer
composer.isDebug	composer
composer.loadScene( sceneName [, doNotLoadView] [, params] )	composer
composer.newScene()	composer
composer.recycleAutomatically	composer
composer.recycleOnLowMemory	composer
composer.recycleOnSceneChange	composer
composer.removeHidden( [shouldRecycle] )	composer
composer.removeScene( sceneName [, shouldRecycle] )	composer
composer.setVariable( variableName, value )	composer
composer.showOverlay( sceneName [, options] )	composer
composer.stage	composer
connectionState	InputDevice
contentBounds	DisplayObject
contentHeight	DisplayObject
contentToLocal( xContent, yContent )	DisplayObject
contentWidth	DisplayObject
crypto.digest( algorithm, data [, raw] )	crypto
crypto.hmac( algorithm, data, key [, raw] )	crypto
crypto.md4	crypto
crypto.md5	crypto
crypto.sha1	crypto
crypto.sha224	crypto
crypto.sha256	crypto
crypto.sha384	crypto
crypto.sha512	crypto
currentTime	Video
dampingRatio	Joint
deleteAllRows()	TableViewWidget
deleteCookies()	WebView
deleteRow( rowIndex )	TableViewWidget
deleteRows( rowArray [, animationOptions] )	TableViewWidget
descriptor	InputAxis
descriptor	InputDevice
dispatchEvent( event )	EventDispatcher
display.actualContentHeight	display
display.actualContentWidth	display
display.capture( displayObject, options )	display
display.captureBounds( screenBounds [, saveToPhotoLibrary] )	display
display.captureScreen( [saveToPhotoLibrary] )	display
display.colorSample( x, y, listener )	display
display.contentCenterX	display
display.contentCenterY	display
display.contentHeight	display
display.contentScaleX	display
display.contentScaleY	display
display.contentWidth	display
display.currentStage	display
display.fps	display
display.getCurrentStage()	display
display.getDefault( key )	display
display.getSafeAreaInsets()	display
display.imageSuffix	display
display.loadRemoteImage( url, method, listener [, params], destFilename [, baseDir] [, x, y] )	display
display.newCircle( [parent,] xCenter, yCenter, radius )	display
display.newContainer( [parent,] width, height )	display
display.newEmbossedText( options )	display
display.newEmitter( emitterParams [, baseDir] )	display
display.newGroup()	display
display.newImage( [parent,] filename [, baseDir] [, x, y] )	display
display.newImage( [parent,] imageSheet, frameIndex [, x, y] )	display
display.newImageRect( [parent,] filename, [baseDir,] width, height )	display
display.newImageRect( [parent,] imageSheet, frameIndex, width, height )	display
display.newLine( [parent,] x1, y1, x2, y2 [, x3, y3, ... ] )	display
display.newMesh( [parent,] [x, y,] options )	display
display.newMesh( options )	display
display.newPolygon( [parent,] x, y, vertices )	display
display.newRect( [parent,] x, y, width, height )	display
display.newRoundedRect( [parent,] x, y, width, height, cornerRadius )	display
display.newSnapshot( [parent,] w, h )	display
display.newSprite( [parent,] imageSheet, sequenceData )	display
display.newText( [parent,] text, x, y [, width, height], font [, fontSize] )	display
display.newText( options )	display
display.pixelHeight	display
display.pixelWidth	display
display.remove( object )	display
display.safeActualContentHeight	display
display.safeActualContentWidth	display
display.safeScreenOriginX	display
display.safeScreenOriginY	display
display.save( displayObject, options )	display
display.save( group, "group.jpg" )	display
display.screenOriginX	display
display.screenOriginY	display
display.setDefault( key, gray )	display
display.setDefault( key, gray, alpha )	display
display.setDefault( key, r, g, b )	display
display.setDefault( key, r, g, b, alpha )	display
display.setDefault( key, value )	display
display.setDrawMode( key, value )	display
display.setStatusBar( mode )	display
display.statusBarHeight	display
display.topStatusBarContentHeight	display
display.viewableContentHeight	display
display.viewableContentWidth	display
displayName	InputDevice
do	Keyword
driver	InputDevice
end	Keyword
error( message [, level] )	global
event.a	colorSample
event.a	particleCollision
event.accuracy	location
event.action	completion
event.address	networkStatus
event.alert	notification
event.altitude	location
event.applicationState	notification
event.axis	axis
event.b	colorSample
event.b	particleCollision
event.badge	notification
event.bytesEstimated	networkRequest
event.bytesTransferred	networkRequest
event.channel	audio
event.city	mapAddress
event.cityDetail	mapAddress
event.commandLineArgs	system
event.commandLineDir	system
event.completed	audio
event.completed	completion
event.connectionStateChanged	inputDeviceStatus
event.contact	collision
event.contact	postCollision
event.contact	preCollision
event.count	timer
event.country	mapAddress
event.countryCode	mapAddress
event.custom	notification
event.data	gameNetwork
event.delta	orientation
event.deltaTime	accelerometer
event.deltaTime	gyroscope
event.descriptor	key
event.device	accelerometer
event.device	axis
event.device	inputDeviceStatus
event.device	key
event.direction	location
event.duration	completion
event.element	particleCollision
event.element1	collision
event.element1	postCollision
event.element1	preCollision
event.element2	collision
event.element2	postCollision
event.element2	preCollision
event.errorCode	gameNetwork
event.errorCode	location
event.errorCode	urlRequest
event.errorMessage	gameNetwork
event.errorMessage	location
event.errorMessage	mapAddress
event.errorMessage	mapLocation
event.errorMessage	unhandledError
event.errorMessage	urlRequest
event.errorType	licensing
event.expiration	licensing
event.fileSize	completion
event.force	postCollision
event.friction	postCollision
event.g	colorSample
event.g	particleCollision
event.geographic	heading
event.handle	audio
event.id	relativeTouch
event.id	touch
event.invalidProducts	productList
event.isAltDown	key
event.isCommandDown	key
event.isConnectionOnDemand	networkStatus
event.isConnectionRequired	networkStatus
event.isCtrlDown	key
event.isError	licensing
event.isError	mapAddress
event.isError	mapLocation
event.isError	networkRequest
event.isInteractionRequired	networkStatus
event.isMiddleButtonDown	mouse
event.isPrimaryButtonDown	mouse
event.isReachable	networkStatus
event.isReachableViaCellular	networkStatus
event.isReachableViaWiFi	networkStatus
event.isSecondaryButtonDown	mouse
event.isShake	accelerometer
event.isShiftDown	key
event.isVerified	licensing
event.keyName	key
event.latitude	location
event.latitude	mapLocation
event.latitude	mapMarker
event.localPlayerScore	gameNetwork
event.longitude	location
event.longitude	mapLocation
event.longitude	mapMarker
event.magnetic	heading
event.markerId	mapMarker
event.name	accelerometer
event.name	audio
event.name	axis
event.name	collision
event.name	colorSample
event.name	completion
event.name	create
event.name	destroy
event.name	enterFrame
event.name	lateUpdate
event.name	finalize
event.name	gameNetwork
event.name	gyroscope
event.name	heading
event.name	hide
event.name	inputDeviceStatus
event.name	key
event.name	licensing
event.name	location
event.name	mapAddress
event.name	mapLocation
event.name	memoryWarning
event.name	mouse
event.name	networkRequest
event.name	networkStatus
event.name	notification
event.name	orientation
event.name	particleCollision
event.name	popup
event.name	postCollision
event.name	preCollision
event.name	productList
event.name	relativeTouch
event.name	resize
event.name	show
event.name	sprite
event.name	storeTransaction
event.name	system
event.name	tap
event.name	timer
event.name	touch
event.name	urlRequest
event.name	video
event.nativeKeyCode	key
event.newCharacters	userInput
event.normalX	particleCollision
event.normalY	particleCollision
event.normalizedValue	axis
event.numDeleted	userInput
event.numTaps	tap
event.object	particleCollision
event.object1	collision
event.object1	postCollision
event.object1	preCollision
event.object2	collision
event.object2	postCollision
event.object2	preCollision
event.oldText	userInput
event.other	collision
event.other	postCollision
event.other	preCollision
event.otherElement	collision
event.otherElement	postCollision
event.otherElement	preCollision
event.params	create
event.params	show
event.parent	hide
event.parent	show
event.particleSystem	particleCollision
event.phase	audio
event.phase	collision
event.phase	hide
event.phase	key
event.phase	networkRequest
event.phase	particleCollision
event.phase	relativeTouch
event.phase	show
event.phase	sprite
event.phase	touch
event.phase	userInput
event.phase	video
event.postalCode	mapAddress
event.pressure	touch
event.products	productList
event.provider	gameNetwork
event.provider	licensing
event.r	colorSample
event.r	particleCollision
event.rawValue	axis
event.reconfigured	inputDeviceStatus
event.region	mapAddress
event.regionDetail	mapAddress
event.request	mapLocation
event.requestId	networkRequest
event.response	licensing
event.response	networkRequest
event.responseHeaders	networkRequest
event.responseType	networkRequest
event.selfElement	collision
event.selfElement	postCollision
event.selfElement	preCollision
event.sound	notification
event.source	timer
event.speed	location
event.sprite	sprite
event.stackTrace	unhandledError
event.startPosition	userInput
event.status	networkRequest
event.street	mapAddress
event.streetDetail	mapAddress
event.tapCount	relativeTouch
event.target	collision
event.target	completion
event.target	finalize
event.target	postCollision
event.target	preCollision
event.target	sprite
event.target	touch
event.target	userInput
event.text	userInput
event.time	enterFrame
event.time	lateUpdate
event.time	location
event.time	mouse
event.time	relativeTouch
event.time	timer
event.time	touch
event.transaction	storeTransaction
event.type	gameNetwork
event.type	mapLocation
event.type	notification
event.type	orientation
event.type	popup
event.type	system
event.type	urlRequest
event.url	completion
event.url	networkRequest
event.url	system
event.url	urlRequest
event.x	collision
event.x	colorSample
event.x	mouse
event.x	particleCollision
event.x	postCollision
event.x	preCollision
event.x	relativeTouch
event.x	tap
event.x	touch
event.xGravity	accelerometer
event.xDelta  touch
event.xInstant	accelerometer
event.xRaw	accelerometer
event.xRotation	gyroscope
event.xStart	touch
event.y	collision
event.y	colorSample
event.y	mouse
event.y	particleCollision
event.y	postCollision
event.y	preCollision
event.y	relativeTouch
event.y	tap
event.y	touch
event.yGravity	accelerometer
event.yDelta  touch
event.yInstant	accelerometer
event.yRaw	accelerometer
event.yRotation	gyroscope
event.yStart	touch
event.zGravity	accelerometer
event.zInstant	accelerometer
event.zRaw	accelerometer
event.zRotation	gyroscope
false	Keyword
fill	ShapeObject
fill.a	Paint
fill.b	Paint
fill.blendEquation	Paint
fill.blendMode	Paint
fill.effect	Paint
fill.frame	ImageSheetPaint
fill.g	Paint
fill.r	Paint
fill.rotation	BitmapPaint
fill.scaleX	BitmapPaint
fill.scaleY	BitmapPaint
fill.x	BitmapPaint
fill.y	BitmapPaint
font	TextBox
font	TextField
forward()	WebView
frame	SpriteObject
frequency	Joint
gameNetwork.match	GameNetwork
gameNetwork.outcome	GameNetwork
gameNetwork.participant	GameNetwork
gameNetwork.status	GameNetwork
getAddressLocation()	Map
getAxes()	InputDevice
getContentPosition()	ScrollViewWidget
getContentPosition()	TableViewWidget
getCurrentProvider()	CoronaLibrary
getLabel()	ButtonWidget
getLinearVelocity()	Body
getMassLocalCenter()	Body
getMassWorldCenter()	Body
getNativeProperty( property )	NativeDisplayObject
getNumRows()	TableViewWidget
getProgress()	ProgressViewWidget
getRowAtIndex( rowIndex )	TableViewWidget
getTarget()	Joint
getUserLocation()	Map
getValue()	StepperWidget
getValues()	PickerWheelWidget
getView()	ScrollViewWidget
getfenv( [f] )	global
getmetatable( object )	global
graphics.defineEffect( effect )	graphics
graphics.getFontMetrics( fontName [, fontSize] )	graphics
graphics.newImageSheet( filename, [baseDir, ] options )	graphics
graphics.newMask( filename [, baseDir] )	graphics
graphics.newOutline( coarsenessInTexels, imageFileName [, baseDir] )	graphics
graphics.newOutline( coarsenessInTexels, imageSheet, frameIndex )	graphics
graphics.newTexture( params )	graphics
graphics.releaseTextures( params )	graphics
gravityScale	Body
group:insert( [index,] child, [, resetTransform] )	GroupObject
hasBackground	TextBox
hasBackground	TextField
hasBackground	WebView
height	DisplayObject
imageRadius	ParticleSystem
initialize()	CoronaPrototype
inputType	TextField
insertRow( options )	TableViewWidget
instanceOf( class )	CoronaPrototype
io.close( [file] )	io
io.flush()	io
io.input( file )	io
io.lines( file )	io
io.open( file [, mode] )	io
io.output( [file] )	io
io.read( [fmt1] [, fmt2] [, ...] )	io
io.tmpfile()	io
io.type( obj )	io
io.write( arg1 [, arg2] [, ...] )	io
ipairs( t )	global
isActive	Joint
isAwake	Body
isBodyActive	Body
isBullet	Body
isClass()	CoronaPrototype
isCollideConnected	Joint
isConnected	InputDevice
isEditable	TextBox
isFixedRotation	Body
isFontSizeScaled	TextBox
isFontSizeScaled	TextField
isHitTestMasked	DisplayObject
isHitTestable	DisplayObject
isLimitEnabled	Joint
isLocationVisible	Map
isMotorEnabled	Joint
isMuted	Video
isOn	SwitchWidget
isPlaying	SpriteObject
isRoot()	CoronaPrototype
isScrollEnabled	Map
isSecure	TextField
isSensor	Body
isSleepingAllowed	Body
isVisible	DisplayObject
isZoomEnabled	Map
joint1	Joint
joint2	Joint
joint:getAnchorA()	Joint
joint:getAnchorB()	Joint
joint:getGroundAnchorA()	Joint
joint:getGroundAnchorB()	Joint
joint:getLimits()	Joint
joint:getLocalAnchorA()	Joint
joint:getLocalAnchorB()	Joint
joint:getLocalAxisA()	Joint
joint:getReactionForce()	Joint
joint:getRotationLimits()	Joint
joint:setLimits( negLimit, posLimit )	Joint
joint:setRotationLimits( negLimit, posLimit )	Joint
jointAngle	Joint
jointSpeed	Joint
jointTranslation	Joint
json.decode( data [, position [, nullval]] )	json
json.decodeFile( filename [, position [, nullval]] )	json
json.encode( t [, options] )	json
json.prettify( obj )	json
length	Joint
length1	Joint
length2	Joint
licensing.init( providerName )	licensing
licensing.verify( listener )	licensing
limitState	Joint
linearDamping	Body
load( path )	Video
load( path, baseSource )	Video
localToContent( x, y )	DisplayObject
mapType	Map
maskRotation	DisplayObject
maskScaleX	DisplayObject
maskScaleY	DisplayObject
maskX	DisplayObject
maskY	DisplayObject
mass	Body
math.abs( x )	math
math.acos( x )	math
math.asin( x )	math
math.atan( x )	math
math.atan2( y, x )	math
math.ceil( x )	math
math.cos( x )	math
math.cosh( x )	math
math.deg( x )	math
math.exp( x )	math
math.floor( x )	math
math.fmod( x, y )	math
math.frexp( x )	math
math.huge	math
math.inf	math
math.ldexp( m, e )	math
math.log( x )	math
math.log10( x )	math
math.max( x, ... )	math
math.min( x, ... )	math
math.modf( x )	math
math.pi	math
math.pow( x, y )	math
math.rad( x )	math
math.random( m )	math
math.random( m, n )	math
math.random()	math
math.randomseed( seed )	math
math.round( x )	math
math.sin( x )	math
math.sinh( x )	math
math.sqrt( x )	math
math.tan( x )	math
math.tanh( x )	math
maxForce	Joint
maxLength	Joint
maxMotorForce	Joint
maxMotorTorque	Joint
maxTorque	Joint
maxValue	InputAxis
maximumValue	StepperWidget
media.RemoteSource	media
media.capturePhoto( { listener [, destination] } )	media
media.captureVideo ( { listener [, preferredQuality] [, preferredMaxDuration] } )	media
media.getSoundVolume()	media
media.hasSource( mediaSource )	media
media.newEventSound( audioFileName [, baseDir] )	media
media.newRecording( [path] )	media
media.pauseSound()	media
media.playEventSound( sound [, baseDir] [, completionListener] )	media
media.playSound( soundfile [, baseDir] [, loop] )	media
media.playSound( soundfile [, baseDir] [, onComplete] )	media
media.playVideo( path [, baseSource ], showControls, listener )	media
media.save( filename [, baseDir] )	media
media.selectPhoto ( { listener [, mediaSource] [, destination] [, origin] [, permittedArrowDirections] } )	media
media.selectPhoto( { listener=sessionComplete } )	media
media.selectVideo ( { listener [, mediaSource] [, origin] [, permittedArrowDirections] } )	media
media.setSoundVolume( volume )	media
media.show()	media
media.stopSound()	media
minValue	InputAxis
minimumValue	StepperWidget
motorForce	Joint
motorSpeed	Joint
motorTorque	Joint
name	CoronaLibrary
native.canShowPopup( name )	native
native.cancelAlert( alert )	native
native.cancelWebPopup()	native
native.getFontNames()	native
native.getProperty( key )	native
native.getSync( filename, params )	native
native.newFont( name [, size] )	native
native.newMapView( x, y, width, height )	native
native.newTextBox( x, y, width, height )	native
native.newTextField( x, y, width, height )	native
native.newVideo( x, y, width, height )	native
native.newWebView( x, y, width, height )	native
native.requestExit()	native
native.setActivityIndicator( state )	native
native.setKeyboardFocus( textField )	native
native.setProperty( key, value )	native
native.setSync( filename, params )	native
native.showAlert( title, message [, buttonLabels [, listener] ] )	native
native.showPopup( name )	native
native.showPopup( name, options )	native
native.showWebPopup( [x, y, width, height,] url, [options] )	native
native.systemFont	native
native.systemFontBold	native
nearestAddress( latitude, longitude, resultHandler )	Map
network.canDetectNetworkStatusChanges	network
network.cancel( requestId )	network
network.download( url, method, listener [, params], filename [, baseDirectory] )	network
network.request( url, method, listener [, params] )	network
network.setStatusListener( hostURL, listener )	network
network.upload( url, method, listener [, params], filename [, baseDirectory] [, contentType] )	network
new( params )	CoronaPrototype
new()	CoronaPrototype
newClass( name )	CoronaPrototype
next( array [, index] )	global
nil	Keyword
numChildren	GroupObject
numFrames	SpriteObject
number	InputAxis
os.clock()	os
os.date( [format [, time] ] )	os
os.difftime( t1, t2 )	os
os.execute( cmd )	os
os.exit( [ exit ] )	os
os.remove( file )	os
os.rename( oldname, newname )	os
os.time( table )	os
package.loaded	package
package.loaders	package
pairs( t )	global
parent	DisplayObject
particleCount	ParticleSystem
particleDamping	ParticleSystem
particleDensity	ParticleSystem
particleDestructionByAge	ParticleSystem
particleGravityScale	ParticleSystem
particleMass	ParticleSystem
particleMaxCount	ParticleSystem
particlePaused	ParticleSystem
particleRadius	ParticleSystem
particleStrictContactCheck	ParticleSystem
particleSystem:applyForce( xForce, yForce )	ParticleSystem
particleSystem:applyLinearImpulse( xForce, yForce )	ParticleSystem
path	ShapeObject
pause()	SpriteObject
pause()	Video
pcall( f [, ...] )	global
permanentId	InputDevice
physics.addBody( object, [bodyType,] [params] )	physics
physics.engineVersion	physics
physics.fromMKS( unitName, value ) 	physics
physics.getAverageCollisionPositions()	physics
physics.getDebugErrorsEnabled()	physics
physics.getGravity()	physics
physics.getMKS( key )	physics
physics.getReportCollisionsInContentCoordinates()	physics
physics.getTimeScale()	physics
physics.newJoint( jointType, ... )	physics
physics.newParticleSystem( params )	physics
physics.pause()	physics
physics.queryRegion( upperLeftX, upperLeftY, lowerRightX, lowerRightY )	physics
physics.rayCast( fromX, fromY, toX, toY, behavior )	physics
physics.reflectRay( fromX, fromY, hit )	physics
physics.removeBody( object )	physics
physics.setAverageCollisionPositions( enabled )	physics
physics.setContinuous( enabled )	physics
physics.setDebugErrorsEnabled( enabled )	physics
physics.setDrawMode( mode )	physics
physics.setGravity( gx, gy )	physics
physics.setMKS( key, value )	physics
physics.setPositionIterations( value )	physics
physics.setReportCollisionsInContentCoordinates( enabled )	physics
physics.setScale( value )	physics
physics.setTimeScale( scale )	physics
physics.setTimeStep( dt )	physics
physics.setVelocityIterations( value )	physics
physics.start()	physics
physics.stop()	physics
physics.toMKS( unitName, value )	physics
placeholder	TextBox
placeholder	TextField
play()	SpriteObject
play()	Video
playerNumber	InputDevice
print( [...] )	global
productName	InputDevice
publisherId	CoronaLibrary
ratio	Joint
rawequal( value1, value2 )	global
rawget( table, index )	global
rawset( table, index, value )	global
reactionTorque	Joint
recording:getSampleRate()	Recording
referenceAngle	Joint
reload()	WebView
reloadData()	TableViewWidget
remove( indexOrChild )	GroupObject
removeAllMarkers()	Map
removeEventListener( eventName, listener )	EventDispatcher
removeMarker( markerID )	Map
removeSelf()	DisplayObject
removeSelf()	Joint
reportsAbsoluteDpadValues	InputDevice
request( url )	WebView
request( url, baseDir )	WebView
requestLocation( location, resultHandler )	Map
requir<span style="display: none;">X</span>e()	package
resetMassData()	Body
resizeFontToFitHeight()	TextField
resizeHeightToFitFont()	TextField
resizeView( newWidth )	ProgressViewWidget
revision	CoronaLibrary
rotate( deltaAngle )	DisplayObject
rotation	DisplayObject
s:byte( [, i [, j]] )	string
s:gmatch( pattern )	string
s:lower()	string
s:match( pattern [, init] )	string
s:rep( n )	string
s:reverse()	string
s:sub( i [,j] )	string
s:upper()	string
scale( xScale, yScale )	DisplayObject
scrollTo( position, options )	ScrollViewWidget
scrollToIndex( rowIndex, time, onComplete )	TableViewWidget
scrollToPosition( options )	ScrollViewWidget
scrollToY( options )	TableViewWidget
seek( timeInSeconds )	Video
segmentLabel	SegmentedControlWidget
segmentNumber	SegmentedControlWidget
select( index, ... )	global
selectValue( targetColumn, targetIndex [, snapToIndex] )	PickerWheelWidget
sequence	SpriteObject
setActiveSegment( segmentNumber )	SegmentedControlWidget
setCenter( latitude, longitude [, isAnimated] )	Map
setCurrentProvider( provider )	CoronaLibrary
setEmbossColor( colorTable )	TextObject
setEnabled( isEnabled )	ButtonWidget
setExtension( indexFunc )	CoronaPrototype
setFillColor( gradient )	ShapeObject
setFillColor( gray )	ShapeObject
setFillColor( gray, alpha )	ShapeObject
setFillColor( red, green, blue )	ShapeObject
setFillColor( red, green, blue, alpha )	ShapeObject
setFrame( frameIndex )	SpriteObject
setIsLocked( isLocked [, axis] )	ScrollViewWidget
setLabel( label )	ButtonWidget
setLinearVelocity( xVelocity, yVelocity )	Body
setMask( mask )	DisplayObject
setNativeProperty( property, value )	NativeDisplayObject
setProgress( progress )	ProgressViewWidget
setRegion( latitude, longitude, latitudeSpan, longitudeSpan [, isAnimated] )	Map
setReturnKey( key )	TextBox
setReturnKey( key )	TextField
setScrollHeight( newHeight )	ScrollViewWidget
setScrollWidth( newWidth )	ScrollViewWidget
setSelected( buttonIndex )	TabBarWidget
setSelected( buttonIndex, simulatePress )	TabBarWidget
setSelection( startPosition, endPosition )	TextBox
setSelection( startPosition, endPosition )	TextField
setSequence( [ sequenceName ] )	SpriteObject
setState( options )	SwitchWidget
setStrokeColor( gray )	ShapeObject
setStrokeColor( gray, alpha )	ShapeObject
setStrokeColor( red, green, blue )	ShapeObject
setStrokeColor( red, green, blue, alpha )	ShapeObject
setTarget( targetX, targetY )	Joint
setTextColor( r, g, b )	TextBox
setTextColor( r, g, b )	TextField
setTextColor( r, g, b, a )	TextBox
setTextColor( r, g, b, a )	TextField
setValue( percent )	SliderWidget
setValue( value )	StepperWidget
setfenv( f, table )	global
setmetatable( table, metatable )	global
size	TextBox
size	TextField
size	TextObject
snapshot.canvas	SnapshotObject
snapshot.canvasMode	SnapshotObject
snapshot.clearColor	SnapshotObject
snapshot.group	SnapshotObject
snapshot.textureFilter	SnapshotObject
snapshot.textureWrapX	SnapshotObject
snapshot.textureWrapY	SnapshotObject
snapshot:invalidate( "canvas" )	SnapshotObject
snapshot:invalidate()	SnapshotObject
spellCheckingType	TextField
springDampingRatio	Joint
springFrequency	Joint
start()	SpinnerWidget
startRecording()	Recording
stop()	SpinnerWidget
stop()	WebView
stopRecording()	Recording
store.canLoadProducts	store
store.canMakePurchases	store
store.finishTransaction( transaction )	store
store.init( listener )	store
store.isActive	store
store.loadProducts( productIdentifiers, productListener )	store
store.purchase( productIdentifiers )	store
store.restore()	store
store.target	store
string.byte( s [, i [, j]] )	string
string.char( [arg1 [, ...] )	string
string.ends( s, suffix )	string
string.find( s, pattern [, init [, plain]] )	string
string.format( formatstring [, ...] )	string
string.gmatch( s, pattern )	string
string.gsub( s, pattern, repl [, n] )	string
string.len( s )	string
string.lower( s )	string
string.match( s, pattern [, init] ) 	string
string.rep( s, n )	string
string.reverse( s )	string
string.starts( s, prefix )	string
string.sub( s, i [, j] )	string
string.upper( s )	string
stroke	ShapeObject
strokeWidth	ShapeObject
system.ApplicationSupportDirectory	system
system.CachesDirectory	system
system.DocumentsDirectory	system
system.ResourceDirectory	system
system.TemporaryDirectory	system
system.activate( feature )	system
system.canOpenURL( url )	system
system.cancelNotification()	system
system.deactivate( feature )	system
system.deletePreferences( category, preferenceNames )	system
system.getIdleTimer()	system
system.getInfo( property )	system
system.getInputDevices()	system
system.getPreference( category, name [, type] )	system
system.getTimer()	system
system.hasEventSource( eventName )	system
system.newEventDispatcher()	system
system.openURL( url )	system
system.orientation	system
system.pathForFile( filename [, baseDirectory] )	system
system.scheduleNotification()	system
system.setAccelerometerInterval( frequency )	system
system.setGyroscopeInterval( frequency )	system
system.setIdleTimer( enabled )	system
system.setLocationAccuracy( distance )	system
system.setLocationThreshold( distance )	system
system.setPreferences( category, preferences )	system
system.setTapDelay( delayTime )	system
system.vibrate()	system
table.concat( t )	table
table.concat( t, sep )	table
table.concat( t, sep, i )	table
table.concat( t, sep, i, j )	table
table.copy( t )	table
table.copy( t, ... )	table
table.indexOf( t, element )	table
table.insert( t, pos, value )	table
table.insert( t, value )	table
table.maxn( t )	table
table.remove( t )	table
table.remove( t, pos )	table
table.sort( array [, compare] )	table
tableView:setIsLocked( isLocked )	TableViewWidget
takeFocus( event )	ScrollViewWidget
text	TextBox
text	TextField
text	TextObject
texture.anchorX	TextureResourceCanvas
texture.anchorY	TextureResourceCanvas
texture.baseDir	TextureResource
texture.cache	TextureResourceCanvas
texture.filename	TextureResource
texture.height	TextureResourceCanvas
texture.height	TextureResourceExternal
texture.pixelHeight	TextureResourceCanvas
texture.pixelWidth	TextureResourceCanvas
texture.type	TextureResource
texture.width	TextureResourceCanvas
texture.width	TextureResourceExternal
texture.wrapX	TextureResourceBitmap
texture.wrapY	TextureResourceBitmap
texture:draw( object )	TextureResourceCanvas
texture:invalidate( [params] )	TextureResourceCanvas
texture:invalidate()	TextureResourceExternal
texture:preload()	TextureResourceBitmap
texture:releaseSelf()	TextureResource
texture:setBackground( gray )	TextureResourceCanvas
texture:setBackground( gray, alpha )	TextureResourceCanvas
texture:setBackground( red, green, blue )	TextureResourceCanvas
texture:setBackground( red, green, blue, alpha )	TextureResourceCanvas
then	Keyword
timeScale	SpriteObject
timer.cancel( timerID )	timer
timer.cancelAll( )	timer
timer.pause( timerId )	timer
timer.pauseAll( )	timer
timer.performWithDelay( delay, listener [, iterations] )	timer
timer.resume( timerId )	timer
timer.resumeAll( )	timer
toBack()	DisplayObject
toFront()	DisplayObject
tonumber( e [, base ] )	global
tostring( e )	global
totalTime	Video
transition.ignoreEmptyReference	transition
transition.blink( target, params )	transition
transition.cancel( displayObject )	transition
transition.cancel( tagName )	transition
transition.cancel( transitionReference )	transition
transition.cancel( )	transition
transition.cancelAll( )	transition
transition.dissolve( object1, object2, time, delay )	transition
transition.fadeIn( target, params )	transition
transition.fadeOut( target, params )	transition
transition.from( target, params )	transition
transition.moveBy( target, params )	transition
transition.moveTo( target, params )	transition
transition.pause( displayObject )	transition
transition.pause( tagName )	transition
transition.pause( transitionReference )	transition
transition.pause( )	transition
transition.pauseAll( )	transition
transition.resume( displayObject )	transition
transition.resume( tagName )	transition
transition.resume( transitionReference )	transition
transition.resume( )	transition
transition.resumeAll( )	transition
transition.scaleBy( target, params )	transition
transition.scaleTo( target, params )	transition
transition.to( target, params )	transition
translate( deltaX, deltaY )	DisplayObject
true	Keyword
type	InputAxis
type	InputDevice
type( v )	global
type.Module	type
unpack( list [, i [, j ]] )	global
value	SliderWidget
value	StepperWidget
version	CoronaLibrary
vibrate()	InputDevice
widget.newButton( options )	widget
widget.newPickerWheel( options )	widget
widget.newProgressView( options )	widget
widget.newScrollView( options )	widget
widget.newSegmentedControl( options )	widget
widget.newSlider( options )	widget
widget.newSpinner( options )	widget
widget.newStepper( options )	widget
widget.newSwitch( options )	widget
widget.newTabBar( options )	widget
widget.newTableView( options )	widget
widget.setTheme( theme )	widget
width	DisplayObject
x	DisplayObject
xScale	DisplayObject
y	DisplayObject
yScale	DisplayObject
