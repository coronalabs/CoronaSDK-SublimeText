{ "scope": "source.lua",  "completions": [
  {   "trigger": "\"angularVelocity\"\tphysics",    "contents": "\"angularVelocity\""  }, 
  {   "trigger": "\"length\"\tphysics",    "contents": "\"length\""  }, 
  {   "trigger": "\"velocity\"\tphysics",    "contents": "\"velocity\""  }, 
  {   "trigger": "Array\ttype",    "contents": "Array"  }, 
  {   "trigger": "Boolean\ttype",    "contents": "Boolean"  }, 
  {   "trigger": "Constant\ttype",    "contents": "Constant"  }, 
  {   "trigger": "CoronaClass\ttype",    "contents": "CoronaClass"  }, 
  {   "trigger": "pause()\tEmitterObject",    "contents": "pause( )"  }, 
  {   "trigger": "start()\tEmitterObject",    "contents": "start( )"  }, 
  {   "trigger": "stop()\tEmitterObject",    "contents": "stop( )"  }, 
  {   "trigger": "Event\ttype",    "contents": "Event"  }, 
  {   "trigger": "close()\tFile",    "contents": "close( )"  }, 
  {   "trigger": "flush()\tFile",    "contents": "flush( )"  }, 
  {   "trigger": "lines()\tFile",    "contents": "lines( )"  }, 
  {   "trigger": "read()\tFile",    "contents": "read( ${1:[fmt1]} ${2:[, fmt2]} ${3:[, ...]} )"  }, 
  {   "trigger": "seek()\tFile",    "contents": "seek( ${1:[mode]} ${2:[, offset]} )"  }, 
  {   "trigger": "setvbuf()\tFile",    "contents": "setvbuf( ${1:mode} ${2:[, size ]} )"  }, 
  {   "trigger": "write()\tFile",    "contents": "write( ${1:arg1} ${2:[, arg2]} ${3:[, ...]} )"  }, 
  {   "trigger": "Function\ttype",    "contents": "Function"  }, 
  {   "trigger": "Library\ttype",    "contents": "Library"  }, 
  {   "trigger": "append()\tLineObject",    "contents": "append( ${1:x}, ${2:y} ${3:[, ... ]} )"  }, 
  {   "trigger": "Listener\ttype",    "contents": "Listener"  }, 
  {   "trigger": "MFiProfile\tInputDevice",    "contents": "MFiProfile"  }, 
  {   "trigger": "Number\ttype",    "contents": "Number"  }, 
  {   "trigger": "Object\ttype",    "contents": "Object"  }, 
  {   "trigger": "sqlite3\tsql",    "contents": "sqlite3"  }, 
  {   "trigger": "createGroup()\tParticleSystem",    "contents": "createGroup( ${1:params} )"  }, 
  {   "trigger": "createParticle()\tParticleSystem",    "contents": "createParticle( ${1:params} )"  }, 
  {   "trigger": "destroyParticles()\tParticleSystem",    "contents": "destroyParticles( ${1:params} )"  }, 
  {   "trigger": "queryRegion()\tParticleSystem",    "contents": "queryRegion( ${1:upperLeftX}, ${2:upperLeftY}, ${3:lowerRightX}, ${4:lowerRightY}, ${5:hitProperties} )"  }, 
  {   "trigger": "rayCast()\tParticleSystem",    "contents": "rayCast( ${1:from_x}, ${2:from_y}, ${3:to_x}, ${4:to_y}, ${5:behavior} )"  }, 
  {   "trigger": "PhysicsContact.bounce\tPhysicsContact",    "contents": "PhysicsContact.bounce"  }, 
  {   "trigger": "PhysicsContact.friction\tPhysicsContact",    "contents": "PhysicsContact.friction"  }, 
  {   "trigger": "PhysicsContact.isEnabled\tPhysicsContact",    "contents": "PhysicsContact.isEnabled"  }, 
  {   "trigger": "PhysicsContact.isTouching\tPhysicsContact",    "contents": "PhysicsContact.isTouching"  }, 
  {   "trigger": "isRecording()\tRecording",    "contents": "isRecording( )"  }, 
  {   "trigger": "setSampleRate()\tRecording",    "contents": "setSampleRate( ${1:r} )"  }, 
  {   "trigger": "hasEventSource()\tRuntime",    "contents": "hasEventSource( ${1:eventSourceName} )"  }, 
  {   "trigger": "hideErrorAlerts()\tRuntime",    "contents": "hideErrorAlerts( )"  }, 
  {   "trigger": "setFocus()\tStageObject",    "contents": "setFocus( ${1:displayObject} ${2:[, touchID]} )"  }, 
  {   "trigger": "String\ttype",    "contents": "String"  }, 
  {   "trigger": "Table\ttype",    "contents": "Table"  }, 
  {   "trigger": "Userdata\ttype",    "contents": "Userdata"  }, 
  {   "trigger": "\\_defined\tDisplayObject",    "contents": "\\_defined"  }, 
  {   "trigger": "\\_lastChange\tDisplayObject",    "contents": "\\_lastChange"  }, 
  {   "trigger": "\\_properties\tDisplayObject",    "contents": "\\_properties"  }, 
  {   "trigger": "accuracy\tInputAxis",    "contents": "accuracy"  }, 
  {   "trigger": "addEventListener()\tEventDispatcher",    "contents": "addEventListener( ${1:eventName}, ${2:listener} )"  }, 
  {   "trigger": "addMarker()\tMap",    "contents": "addMarker( ${1:latitude}, ${2:longitude} )"  }, 
  {   "trigger": "addMarker()\tMap",    "contents": "addMarker( ${1:latitude}, ${2:longitude}, ${3:options} )"  }, 
  {   "trigger": "align\tTextBox",    "contents": "align"  }, 
  {   "trigger": "align\tTextField",    "contents": "align"  }, 
  {   "trigger": "allowsRotation\tInputDevice",    "contents": "allowsRotation"  }, 
  {   "trigger": "alpha\tDisplayObject",    "contents": "alpha"  }, 
  {   "trigger": "anchorChildren\tGroupObject",    "contents": "anchorChildren"  }, 
  {   "trigger": "anchorSegments\tLineObject",    "contents": "anchorSegments"  }, 
  {   "trigger": "anchorX\tDisplayObject",    "contents": "anchorX"  }, 
  {   "trigger": "anchorY\tDisplayObject",    "contents": "anchorY"  }, 
  {   "trigger": "androidDeviceId\tInputDevice",    "contents": "androidDeviceId"  }, 
  {   "trigger": "angularDamping\tBody",    "contents": "angularDamping"  }, 
  {   "trigger": "angularVelocity\tBody",    "contents": "angularVelocity"  }, 
  {   "trigger": "applyAngularImpulse()\tBody",    "contents": "applyAngularImpulse( ${1:appliedForce} )"  }, 
  {   "trigger": "applyForce()\tBody",    "contents": "applyForce( ${1:xForce}, ${2:yForce}, ${3:bodyX}, ${4:bodyY} )"  }, 
  {   "trigger": "applyLinearImpulse()\tBody",    "contents": "applyLinearImpulse( ${1:xForce}, ${2:yForce}, ${3:bodyX}, ${4:bodyY} )"  }, 
  {   "trigger": "applyTorque()\tBody",    "contents": "applyTorque( ${1:appliedForce} )"  }, 
  {   "trigger": "assert()\tglobal",    "contents": "assert( ${1:v} ${2:[, message]} )"  }, 
  {   "trigger": "audio.dispose()\taudio",    "contents": "audio.dispose( ${1:audioHandle} )"  }, 
  {   "trigger": "audio.fade()\taudio",    "contents": "audio.fade( ${1:[ { [channel=c]} ${2:[, time=t]} ${3:[, volume=v ]}, ${4:} ]} )"  }, 
  {   "trigger": "audio.fadeOut()\taudio",    "contents": "audio.fadeOut( ${1:[ { [channel=c]} ${2:[, time=t]}, ${3:} ]} )"  }, 
  {   "trigger": "audio.findFreeChannel()\taudio",    "contents": "audio.findFreeChannel( ${1:[ startChannel ]} )"  }, 
  {   "trigger": "audio.freeChannels\taudio",    "contents": "audio.freeChannels"  }, 
  {   "trigger": "audio.getDuration()\taudio",    "contents": "audio.getDuration( ${1:audioHandle} )"  }, 
  {   "trigger": "audio.getMaxVolume()\taudio",    "contents": "audio.getMaxVolume( ${1:{ channel=c }} )"  }, 
  {   "trigger": "audio.getMinVolume()\taudio",    "contents": "audio.getMinVolume( ${1:{ channel=c }} )"  }, 
  {   "trigger": "audio.getVolume()\taudio",    "contents": "audio.getVolume( ${1:{ channel=c }} )"  }, 
  {   "trigger": "audio.isChannelActive()\taudio",    "contents": "audio.isChannelActive( ${1:channel} )"  }, 
  {   "trigger": "audio.isChannelPaused()\taudio",    "contents": "audio.isChannelPaused( ${1:channel} )"  }, 
  {   "trigger": "audio.isChannelPlaying()\taudio",    "contents": "audio.isChannelPlaying( ${1:channel} )"  }, 
  {   "trigger": "audio.loadSound()\taudio",    "contents": "audio.loadSound( ${1:audiofileName} ${2:[, baseDir ]} )"  }, 
  {   "trigger": "audio.loadStream()\taudio",    "contents": "audio.loadStream( ${1:audioFileName} ${2:[, baseDir ]} )"  }, 
  {   "trigger": "audio.pause()\taudio",    "contents": "audio.pause( ${1:[channel]} )"  }, 
  {   "trigger": "audio.play()\taudio",    "contents": "audio.play( ${1:audioHandle} ${2:[, options ]} )"  }, 
  {   "trigger": "audio.reserveChannels()\taudio",    "contents": "audio.reserveChannels( ${1:channels} )"  }, 
  {   "trigger": "audio.reservedChannels\taudio",    "contents": "audio.reservedChannels"  }, 
  {   "trigger": "audio.resume()\taudio",    "contents": "audio.resume( ${1:[channel]} )"  }, 
  {   "trigger": "audio.rewind()\taudio",    "contents": "audio.rewind( ${1:[audioHandle | options]} )"  }, 
  {   "trigger": "audio.seek()\taudio",    "contents": "audio.seek( ${1:time} ${2:[, audioHandle ]} ${3:[, options ]} )"  }, 
  {   "trigger": "audio.setMaxVolume()\taudio",    "contents": "audio.setMaxVolume( ${1:volume}, ${2:options} )"  }, 
  {   "trigger": "audio.setMinVolume()\taudio",    "contents": "audio.setMinVolume( ${1:volume}, ${2:options} )"  }, 
  {   "trigger": "audio.setVolume()\taudio",    "contents": "audio.setVolume( ${1:volume} ${2:[, options ]} )"  }, 
  {   "trigger": "audio.stop()\taudio",    "contents": "audio.stop( ${1:[channel]} )"  }, 
  {   "trigger": "audio.stopWithDelay()\taudio",    "contents": "audio.stopWithDelay( ${1:duration} ${2:[, options ]} )"  }, 
  {   "trigger": "audio.totalChannels\taudio",    "contents": "audio.totalChannels"  }, 
  {   "trigger": "audio.unreservedFreeChannels\taudio",    "contents": "audio.unreservedFreeChannels"  }, 
  {   "trigger": "audio.unreservedUsedChannels\taudio",    "contents": "audio.unreservedUsedChannels"  }, 
  {   "trigger": "audio.usedChannels\taudio",    "contents": "audio.usedChannels"  }, 
  {   "trigger": "autocorrectionType\tTextField",    "contents": "autocorrectionType"  }, 
  {   "trigger": "back()\tWebView",    "contents": "back( )"  }, 
  {   "trigger": "baselineOffset\tTextObject",    "contents": "baselineOffset"  }, 
  {   "trigger": "blendMode\tDisplayObject",    "contents": "blendMode"  }, 
  {   "trigger": "bodyType\tBody",    "contents": "bodyType"  }, 
  {   "trigger": "canGoBack\tWebView",    "contents": "canGoBack"  }, 
  {   "trigger": "canGoForward\tWebView",    "contents": "canGoForward"  }, 
  {   "trigger": "canVibrate\tInputDevice",    "contents": "canVibrate"  }, 
  {   "trigger": "collectgarbage()\tglobal",    "contents": "collectgarbage( ${1:[opt [, arg]}, ${2:]} )"  }, 
  {   "trigger": "composer.getScene()\tcomposer",    "contents": "composer.getScene( ${1:sceneName} )"  }, 
  {   "trigger": "composer.getSceneName()\tcomposer",    "contents": "composer.getSceneName( ${1:sceneType} )"  }, 
  {   "trigger": "composer.getVariable()\tcomposer",    "contents": "composer.getVariable( ${1:variableName} )"  }, 
  {   "trigger": "composer.gotoScene()\tcomposer",    "contents": "composer.gotoScene( ${1:sceneName} ${2:[, options]} )"  }, 
  {   "trigger": "composer.hideOverlay()\tcomposer",    "contents": "composer.hideOverlay( ${1:[recycleOnly]} ${2:[, effect]} ${3:[, time]} )"  }, 
  {   "trigger": "composer.isDebug\tcomposer",    "contents": "composer.isDebug"  }, 
  {   "trigger": "composer.loadScene()\tcomposer",    "contents": "composer.loadScene( ${1:sceneName} ${2:[, doNotLoadView]} ${3:[, params]} )"  }, 
  {   "trigger": "composer.newScene()\tcomposer",    "contents": "composer.newScene( )"  }, 
  {   "trigger": "composer.recycleAutomatically\tcomposer",    "contents": "composer.recycleAutomatically"  }, 
  {   "trigger": "composer.recycleOnLowMemory\tcomposer",    "contents": "composer.recycleOnLowMemory"  }, 
  {   "trigger": "composer.recycleOnSceneChange\tcomposer",    "contents": "composer.recycleOnSceneChange"  }, 
  {   "trigger": "composer.removeHidden()\tcomposer",    "contents": "composer.removeHidden( ${1:[shouldRecycle]} )"  }, 
  {   "trigger": "composer.removeScene()\tcomposer",    "contents": "composer.removeScene( ${1:sceneName} ${2:[, shouldRecycle]} )"  }, 
  {   "trigger": "composer.setVariable()\tcomposer",    "contents": "composer.setVariable( ${1:variableName}, ${2:value} )"  }, 
  {   "trigger": "composer.showOverlay()\tcomposer",    "contents": "composer.showOverlay( ${1:sceneName} ${2:[, options]} )"  }, 
  {   "trigger": "composer.stage\tcomposer",    "contents": "composer.stage"  }, 
  {   "trigger": "connectionState\tInputDevice",    "contents": "connectionState"  }, 
  {   "trigger": "contentBounds\tDisplayObject",    "contents": "contentBounds"  }, 
  {   "trigger": "contentHeight\tDisplayObject",    "contents": "contentHeight"  }, 
  {   "trigger": "contentToLocal()\tDisplayObject",    "contents": "contentToLocal( ${1:xContent}, ${2:yContent} )"  }, 
  {   "trigger": "contentWidth\tDisplayObject",    "contents": "contentWidth"  }, 
  {   "trigger": "crypto.digest()\tcrypto",    "contents": "crypto.digest( ${1:algorithm}, ${2:data} ${3:[, raw]} )"  }, 
  {   "trigger": "crypto.hmac()\tcrypto",    "contents": "crypto.hmac( ${1:algorithm}, ${2:data}, ${3:key} ${4:[, raw]} )"  }, 
  {   "trigger": "crypto.md4\tcrypto",    "contents": "crypto.md4"  }, 
  {   "trigger": "crypto.md5\tcrypto",    "contents": "crypto.md5"  }, 
  {   "trigger": "crypto.sha1\tcrypto",    "contents": "crypto.sha1"  }, 
  {   "trigger": "crypto.sha224\tcrypto",    "contents": "crypto.sha224"  }, 
  {   "trigger": "crypto.sha256\tcrypto",    "contents": "crypto.sha256"  }, 
  {   "trigger": "crypto.sha384\tcrypto",    "contents": "crypto.sha384"  }, 
  {   "trigger": "crypto.sha512\tcrypto",    "contents": "crypto.sha512"  }, 
  {   "trigger": "currentTime\tVideo",    "contents": "currentTime"  }, 
  {   "trigger": "dampingRatio\tJoint",    "contents": "dampingRatio"  }, 
  {   "trigger": "deleteAllRows()\tTableViewWidget",    "contents": "deleteAllRows( )"  }, 
  {   "trigger": "deleteCookies()\tWebView",    "contents": "deleteCookies( )"  }, 
  {   "trigger": "deleteRow()\tTableViewWidget",    "contents": "deleteRow( ${1:rowIndex} )"  }, 
  {   "trigger": "deleteRows()\tTableViewWidget",    "contents": "deleteRows( ${1:rowArray} ${2:[, animationOptions]} )"  }, 
  {   "trigger": "descriptor\tInputAxis",    "contents": "descriptor"  }, 
  {   "trigger": "descriptor\tInputDevice",    "contents": "descriptor"  }, 
  {   "trigger": "dispatchEvent()\tEventDispatcher",    "contents": "dispatchEvent( ${1:event} )"  }, 
  {   "trigger": "display.actualContentHeight\tdisplay",    "contents": "display.actualContentHeight"  }, 
  {   "trigger": "display.actualContentWidth\tdisplay",    "contents": "display.actualContentWidth"  }, 
  {   "trigger": "display.capture()\tdisplay",    "contents": "display.capture( ${1:displayObject}, ${2:options} )"  }, 
  {   "trigger": "display.captureBounds()\tdisplay",    "contents": "display.captureBounds( ${1:screenBounds} ${2:[, saveToPhotoLibrary]} )"  }, 
  {   "trigger": "display.captureScreen()\tdisplay",    "contents": "display.captureScreen( ${1:[saveToPhotoLibrary]} )"  }, 
  {   "trigger": "display.colorSample()\tdisplay",    "contents": "display.colorSample( ${1:x}, ${2:y}, ${3:listener} )"  }, 
  {   "trigger": "display.contentCenterX\tdisplay",    "contents": "display.contentCenterX"  }, 
  {   "trigger": "display.contentCenterY\tdisplay",    "contents": "display.contentCenterY"  }, 
  {   "trigger": "display.contentHeight\tdisplay",    "contents": "display.contentHeight"  }, 
  {   "trigger": "display.contentScaleX\tdisplay",    "contents": "display.contentScaleX"  }, 
  {   "trigger": "display.contentScaleY\tdisplay",    "contents": "display.contentScaleY"  }, 
  {   "trigger": "display.contentWidth\tdisplay",    "contents": "display.contentWidth"  }, 
  {   "trigger": "display.currentStage\tdisplay",    "contents": "display.currentStage"  }, 
  {   "trigger": "display.fps\tdisplay",    "contents": "display.fps"  }, 
  {   "trigger": "display.getCurrentStage()\tdisplay",    "contents": "display.getCurrentStage( )"  }, 
  {   "trigger": "display.getDefault()\tdisplay",    "contents": "display.getDefault( ${1:key} )"  }, 
  {   "trigger": "display.getSafeAreaInsets()\tdisplay",    "contents": "display.getSafeAreaInsets( )"  }, 
  {   "trigger": "display.imageSuffix\tdisplay",    "contents": "display.imageSuffix"  }, 
  {   "trigger": "display.loadRemoteImage()\tdisplay",    "contents": "display.loadRemoteImage( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]}, ${5:destFilename} ${6:[, baseDir]} ${7:[, x, y]} )"  }, 
  {   "trigger": "display.newCircle()\tdisplay",    "contents": "display.newCircle( ${1:[parent,]}, ${2:xCenter}, ${3:yCenter}, ${4:radius} )"  }, 
  {   "trigger": "display.newContainer()\tdisplay",    "contents": "display.newContainer( ${1:[parent,]}, ${2:width}, ${3:height} )"  }, 
  {   "trigger": "display.newEmbossedText()\tdisplay",    "contents": "display.newEmbossedText( ${1:options} )"  }, 
  {   "trigger": "display.newEmitter()\tdisplay",    "contents": "display.newEmitter( ${1:emitterParams} ${2:[, baseDir]} )"  }, 
  {   "trigger": "display.newGroup()\tdisplay",    "contents": "display.newGroup( )"  }, 
  {   "trigger": "display.newImage()\tdisplay",    "contents": "display.newImage( ${1:[parent,]}, ${2:filename} ${3:[, baseDir]} ${4:[, x, y]} )"  }, 
  {   "trigger": "display.newImage()\tdisplay",    "contents": "display.newImage( ${1:[parent,]}, ${2:imageSheet}, ${3:frameIndex} ${4:[, x, y]} )"  }, 
  {   "trigger": "display.newImageRect()\tdisplay",    "contents": "display.newImageRect( ${1:[parent,]}, ${2:filename}, ${3:[baseDir,]}, ${4:width}, ${5:height} )"  }, 
  {   "trigger": "display.newImageRect()\tdisplay",    "contents": "display.newImageRect( ${1:[parent,]}, ${2:imageSheet}, ${3:frameIndex}, ${4:width}, ${5:height} )"  }, 
  {   "trigger": "display.newLine()\tdisplay",    "contents": "display.newLine( ${1:[parent,]}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2} ${6:[, x3, y3, ... ]} )"  }, 
  {   "trigger": "display.newMesh()\tdisplay",    "contents": "display.newMesh( ${1:[parent,]}, ${2:[x, y,]}, ${3:options} )"  }, 
  {   "trigger": "display.newMesh()\tdisplay",    "contents": "display.newMesh( ${1:options} )"  }, 
  {   "trigger": "display.newPolygon()\tdisplay",    "contents": "display.newPolygon( ${1:[parent,]}, ${2:x}, ${3:y}, ${4:vertices} )"  }, 
  {   "trigger": "display.newRect()\tdisplay",    "contents": "display.newRect( ${1:[parent,]}, ${2:x}, ${3:y}, ${4:width}, ${5:height} )"  }, 
  {   "trigger": "display.newRoundedRect()\tdisplay",    "contents": "display.newRoundedRect( ${1:[parent,]}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:cornerRadius} )"  }, 
  {   "trigger": "display.newSnapshot()\tdisplay",    "contents": "display.newSnapshot( ${1:[parent,]}, ${2:w}, ${3:h} )"  }, 
  {   "trigger": "display.newSprite()\tdisplay",    "contents": "display.newSprite( ${1:[parent,]}, ${2:imageSheet}, ${3:sequenceData} )"  }, 
  {   "trigger": "display.newText()\tdisplay",    "contents": "display.newText( ${1:[parent,]}, ${2:text}, ${3:x}, ${4:y} ${5:[, width, height]}, ${6:font} ${7:[, fontSize]} )"  }, 
  {   "trigger": "display.newText()\tdisplay",    "contents": "display.newText( ${1:options} )"  }, 
  {   "trigger": "display.pixelHeight\tdisplay",    "contents": "display.pixelHeight"  }, 
  {   "trigger": "display.pixelWidth\tdisplay",    "contents": "display.pixelWidth"  }, 
  {   "trigger": "display.remove()\tdisplay",    "contents": "display.remove( ${1:object} )"  }, 
  {   "trigger": "display.safeActualContentHeight\tdisplay",    "contents": "display.safeActualContentHeight"  }, 
  {   "trigger": "display.safeActualContentWidth\tdisplay",    "contents": "display.safeActualContentWidth"  }, 
  {   "trigger": "display.safeScreenOriginX\tdisplay",    "contents": "display.safeScreenOriginX"  }, 
  {   "trigger": "display.safeScreenOriginY\tdisplay",    "contents": "display.safeScreenOriginY"  }, 
  {   "trigger": "display.save()\tdisplay",    "contents": "display.save( ${1:displayObject}, ${2:options} )"  }, 
  {   "trigger": "display.save()\tdisplay",    "contents": "display.save( ${1:group}, ${2:\"group.jpg\"} )"  }, 
  {   "trigger": "display.screenOriginX\tdisplay",    "contents": "display.screenOriginX"  }, 
  {   "trigger": "display.screenOriginY\tdisplay",    "contents": "display.screenOriginY"  }, 
  {   "trigger": "display.setDefault()\tdisplay",    "contents": "display.setDefault( ${1:key}, ${2:gray} )"  }, 
  {   "trigger": "display.setDefault()\tdisplay",    "contents": "display.setDefault( ${1:key}, ${2:gray}, ${3:alpha} )"  }, 
  {   "trigger": "display.setDefault()\tdisplay",    "contents": "display.setDefault( ${1:key}, ${2:r}, ${3:g}, ${4:b} )"  }, 
  {   "trigger": "display.setDefault()\tdisplay",    "contents": "display.setDefault( ${1:key}, ${2:r}, ${3:g}, ${4:b}, ${5:alpha} )"  }, 
  {   "trigger": "display.setDefault()\tdisplay",    "contents": "display.setDefault( ${1:key}, ${2:value} )"  }, 
  {   "trigger": "display.setDrawMode()\tdisplay",    "contents": "display.setDrawMode( ${1:key}, ${2:value} )"  }, 
  {   "trigger": "display.setStatusBar()\tdisplay",    "contents": "display.setStatusBar( ${1:mode} )"  }, 
  {   "trigger": "display.statusBarHeight\tdisplay",    "contents": "display.statusBarHeight"  }, 
  {   "trigger": "display.topStatusBarContentHeight\tdisplay",    "contents": "display.topStatusBarContentHeight"  }, 
  {   "trigger": "display.viewableContentHeight\tdisplay",    "contents": "display.viewableContentHeight"  }, 
  {   "trigger": "display.viewableContentWidth\tdisplay",    "contents": "display.viewableContentWidth"  }, 
  {   "trigger": "displayName\tInputDevice",    "contents": "displayName"  }, 
  {   "trigger": "do\tKeyword",    "contents": "do"  }, 
  {   "trigger": "driver\tInputDevice",    "contents": "driver"  }, 
  {   "trigger": "end\tKeyword",    "contents": "end"  }, 
  {   "trigger": "error()\tglobal",    "contents": "error( ${1:message} ${2:[, level]} )"  }, 
  {   "trigger": "event.a\tcolorSample",    "contents": "event.a"  }, 
  {   "trigger": "event.a\tparticleCollision",    "contents": "event.a"  }, 
  {   "trigger": "event.accuracy\tlocation",    "contents": "event.accuracy"  }, 
  {   "trigger": "event.action\tcompletion",    "contents": "event.action"  }, 
  {   "trigger": "event.address\tnetworkStatus",    "contents": "event.address"  }, 
  {   "trigger": "event.alert\tnotification",    "contents": "event.alert"  }, 
  {   "trigger": "event.altitude\tlocation",    "contents": "event.altitude"  }, 
  {   "trigger": "event.applicationState\tnotification",    "contents": "event.applicationState"  }, 
  {   "trigger": "event.axis\taxis",    "contents": "event.axis"  }, 
  {   "trigger": "event.b\tcolorSample",    "contents": "event.b"  }, 
  {   "trigger": "event.b\tparticleCollision",    "contents": "event.b"  }, 
  {   "trigger": "event.badge\tnotification",    "contents": "event.badge"  }, 
  {   "trigger": "event.bytesEstimated\tnetworkRequest",    "contents": "event.bytesEstimated"  }, 
  {   "trigger": "event.bytesTransferred\tnetworkRequest",    "contents": "event.bytesTransferred"  }, 
  {   "trigger": "event.channel\taudio",    "contents": "event.channel"  }, 
  {   "trigger": "event.city\tmapAddress",    "contents": "event.city"  }, 
  {   "trigger": "event.cityDetail\tmapAddress",    "contents": "event.cityDetail"  }, 
  {   "trigger": "event.commandLineArgs\tsystem",    "contents": "event.commandLineArgs"  }, 
  {   "trigger": "event.commandLineDir\tsystem",    "contents": "event.commandLineDir"  }, 
  {   "trigger": "event.completed\taudio",    "contents": "event.completed"  }, 
  {   "trigger": "event.completed\tcompletion",    "contents": "event.completed"  }, 
  {   "trigger": "event.connectionStateChanged\tinputDeviceStatus",    "contents": "event.connectionStateChanged"  }, 
  {   "trigger": "event.contact\tcollision",    "contents": "event.contact"  }, 
  {   "trigger": "event.contact\tpostCollision",    "contents": "event.contact"  }, 
  {   "trigger": "event.contact\tpreCollision",    "contents": "event.contact"  }, 
  {   "trigger": "event.count\ttimer",    "contents": "event.count"  }, 
  {   "trigger": "event.country\tmapAddress",    "contents": "event.country"  }, 
  {   "trigger": "event.countryCode\tmapAddress",    "contents": "event.countryCode"  }, 
  {   "trigger": "event.custom\tnotification",    "contents": "event.custom"  }, 
  {   "trigger": "event.data\tgameNetwork",    "contents": "event.data"  }, 
  {   "trigger": "event.delta\torientation",    "contents": "event.delta"  }, 
  {   "trigger": "event.deltaTime\taccelerometer",    "contents": "event.deltaTime"  }, 
  {   "trigger": "event.deltaTime\tgyroscope",    "contents": "event.deltaTime"  }, 
  {   "trigger": "event.descriptor\tkey",    "contents": "event.descriptor"  }, 
  {   "trigger": "event.device\taccelerometer",    "contents": "event.device"  }, 
  {   "trigger": "event.device\taxis",    "contents": "event.device"  }, 
  {   "trigger": "event.device\tinputDeviceStatus",    "contents": "event.device"  }, 
  {   "trigger": "event.device\tkey",    "contents": "event.device"  }, 
  {   "trigger": "event.direction\tlocation",    "contents": "event.direction"  }, 
  {   "trigger": "event.duration\tcompletion",    "contents": "event.duration"  }, 
  {   "trigger": "event.element\tparticleCollision",    "contents": "event.element"  }, 
  {   "trigger": "event.element1\tcollision",    "contents": "event.element1"  }, 
  {   "trigger": "event.element1\tpostCollision",    "contents": "event.element1"  }, 
  {   "trigger": "event.element1\tpreCollision",    "contents": "event.element1"  }, 
  {   "trigger": "event.element2\tcollision",    "contents": "event.element2"  }, 
  {   "trigger": "event.element2\tpostCollision",    "contents": "event.element2"  }, 
  {   "trigger": "event.element2\tpreCollision",    "contents": "event.element2"  }, 
  {   "trigger": "event.errorCode\tgameNetwork",    "contents": "event.errorCode"  }, 
  {   "trigger": "event.errorCode\tlocation",    "contents": "event.errorCode"  }, 
  {   "trigger": "event.errorCode\turlRequest",    "contents": "event.errorCode"  }, 
  {   "trigger": "event.errorMessage\tgameNetwork",    "contents": "event.errorMessage"  }, 
  {   "trigger": "event.errorMessage\tlocation",    "contents": "event.errorMessage"  }, 
  {   "trigger": "event.errorMessage\tmapAddress",    "contents": "event.errorMessage"  }, 
  {   "trigger": "event.errorMessage\tmapLocation",    "contents": "event.errorMessage"  }, 
  {   "trigger": "event.errorMessage\tunhandledError",    "contents": "event.errorMessage"  }, 
  {   "trigger": "event.errorMessage\turlRequest",    "contents": "event.errorMessage"  }, 
  {   "trigger": "event.errorType\tlicensing",    "contents": "event.errorType"  }, 
  {   "trigger": "event.expiration\tlicensing",    "contents": "event.expiration"  }, 
  {   "trigger": "event.fileSize\tcompletion",    "contents": "event.fileSize"  }, 
  {   "trigger": "event.force\tpostCollision",    "contents": "event.force"  }, 
  {   "trigger": "event.friction\tpostCollision",    "contents": "event.friction"  }, 
  {   "trigger": "event.g\tcolorSample",    "contents": "event.g"  }, 
  {   "trigger": "event.g\tparticleCollision",    "contents": "event.g"  }, 
  {   "trigger": "event.geographic\theading",    "contents": "event.geographic"  }, 
  {   "trigger": "event.handle\taudio",    "contents": "event.handle"  }, 
  {   "trigger": "event.id\trelativeTouch",    "contents": "event.id"  }, 
  {   "trigger": "event.id\ttouch",    "contents": "event.id"  }, 
  {   "trigger": "event.invalidProducts\tproductList",    "contents": "event.invalidProducts"  }, 
  {   "trigger": "event.isAltDown\tkey",    "contents": "event.isAltDown"  }, 
  {   "trigger": "event.isCommandDown\tkey",    "contents": "event.isCommandDown"  }, 
  {   "trigger": "event.isConnectionOnDemand\tnetworkStatus",    "contents": "event.isConnectionOnDemand"  }, 
  {   "trigger": "event.isConnectionRequired\tnetworkStatus",    "contents": "event.isConnectionRequired"  }, 
  {   "trigger": "event.isCtrlDown\tkey",    "contents": "event.isCtrlDown"  }, 
  {   "trigger": "event.isError\tlicensing",    "contents": "event.isError"  }, 
  {   "trigger": "event.isError\tmapAddress",    "contents": "event.isError"  }, 
  {   "trigger": "event.isError\tmapLocation",    "contents": "event.isError"  }, 
  {   "trigger": "event.isError\tnetworkRequest",    "contents": "event.isError"  }, 
  {   "trigger": "event.isInteractionRequired\tnetworkStatus",    "contents": "event.isInteractionRequired"  }, 
  {   "trigger": "event.isMiddleButtonDown\tmouse",    "contents": "event.isMiddleButtonDown"  }, 
  {   "trigger": "event.isPrimaryButtonDown\tmouse",    "contents": "event.isPrimaryButtonDown"  }, 
  {   "trigger": "event.isReachable\tnetworkStatus",    "contents": "event.isReachable"  }, 
  {   "trigger": "event.isReachableViaCellular\tnetworkStatus",    "contents": "event.isReachableViaCellular"  }, 
  {   "trigger": "event.isReachableViaWiFi\tnetworkStatus",    "contents": "event.isReachableViaWiFi"  }, 
  {   "trigger": "event.isSecondaryButtonDown\tmouse",    "contents": "event.isSecondaryButtonDown"  }, 
  {   "trigger": "event.isShake\taccelerometer",    "contents": "event.isShake"  }, 
  {   "trigger": "event.isShiftDown\tkey",    "contents": "event.isShiftDown"  }, 
  {   "trigger": "event.isVerified\tlicensing",    "contents": "event.isVerified"  }, 
  {   "trigger": "event.keyName\tkey",    "contents": "event.keyName"  }, 
  {   "trigger": "event.latitude\tlocation",    "contents": "event.latitude"  }, 
  {   "trigger": "event.latitude\tmapLocation",    "contents": "event.latitude"  }, 
  {   "trigger": "event.latitude\tmapMarker",    "contents": "event.latitude"  }, 
  {   "trigger": "event.localPlayerScore\tgameNetwork",    "contents": "event.localPlayerScore"  }, 
  {   "trigger": "event.longitude\tlocation",    "contents": "event.longitude"  }, 
  {   "trigger": "event.longitude\tmapLocation",    "contents": "event.longitude"  }, 
  {   "trigger": "event.longitude\tmapMarker",    "contents": "event.longitude"  }, 
  {   "trigger": "event.magnetic\theading",    "contents": "event.magnetic"  }, 
  {   "trigger": "event.markerId\tmapMarker",    "contents": "event.markerId"  }, 
  {   "trigger": "event.name\taccelerometer",    "contents": "event.name"  }, 
  {   "trigger": "event.name\taudio",    "contents": "event.name"  }, 
  {   "trigger": "event.name\taxis",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tcollision",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tcolorSample",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tcompletion",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tcreate",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tdestroy",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tenterFrame",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tlateUpdate",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tfinalize",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tgameNetwork",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tgyroscope",    "contents": "event.name"  }, 
  {   "trigger": "event.name\theading",    "contents": "event.name"  }, 
  {   "trigger": "event.name\thide",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tinputDeviceStatus",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tkey",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tlicensing",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tlocation",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tmapAddress",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tmapLocation",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tmemoryWarning",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tmouse",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tnetworkRequest",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tnetworkStatus",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tnotification",    "contents": "event.name"  }, 
  {   "trigger": "event.name\torientation",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tparticleCollision",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tpopup",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tpostCollision",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tpreCollision",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tproductList",    "contents": "event.name"  }, 
  {   "trigger": "event.name\trelativeTouch",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tresize",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tshow",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tsprite",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tstoreTransaction",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tsystem",    "contents": "event.name"  }, 
  {   "trigger": "event.name\ttap",    "contents": "event.name"  }, 
  {   "trigger": "event.name\ttimer",    "contents": "event.name"  }, 
  {   "trigger": "event.name\ttouch",    "contents": "event.name"  }, 
  {   "trigger": "event.name\turlRequest",    "contents": "event.name"  }, 
  {   "trigger": "event.name\tvideo",    "contents": "event.name"  }, 
  {   "trigger": "event.nativeKeyCode\tkey",    "contents": "event.nativeKeyCode"  }, 
  {   "trigger": "event.newCharacters\tuserInput",    "contents": "event.newCharacters"  }, 
  {   "trigger": "event.normalX\tparticleCollision",    "contents": "event.normalX"  }, 
  {   "trigger": "event.normalY\tparticleCollision",    "contents": "event.normalY"  }, 
  {   "trigger": "event.normalizedValue\taxis",    "contents": "event.normalizedValue"  }, 
  {   "trigger": "event.numDeleted\tuserInput",    "contents": "event.numDeleted"  }, 
  {   "trigger": "event.numTaps\ttap",    "contents": "event.numTaps"  }, 
  {   "trigger": "event.object\tparticleCollision",    "contents": "event.object"  }, 
  {   "trigger": "event.object1\tcollision",    "contents": "event.object1"  }, 
  {   "trigger": "event.object1\tpostCollision",    "contents": "event.object1"  }, 
  {   "trigger": "event.object1\tpreCollision",    "contents": "event.object1"  }, 
  {   "trigger": "event.object2\tcollision",    "contents": "event.object2"  }, 
  {   "trigger": "event.object2\tpostCollision",    "contents": "event.object2"  }, 
  {   "trigger": "event.object2\tpreCollision",    "contents": "event.object2"  }, 
  {   "trigger": "event.oldText\tuserInput",    "contents": "event.oldText"  }, 
  {   "trigger": "event.other\tcollision",    "contents": "event.other"  }, 
  {   "trigger": "event.other\tpostCollision",    "contents": "event.other"  }, 
  {   "trigger": "event.other\tpreCollision",    "contents": "event.other"  }, 
  {   "trigger": "event.otherElement\tcollision",    "contents": "event.otherElement"  }, 
  {   "trigger": "event.otherElement\tpostCollision",    "contents": "event.otherElement"  }, 
  {   "trigger": "event.otherElement\tpreCollision",    "contents": "event.otherElement"  }, 
  {   "trigger": "event.params\tcreate",    "contents": "event.params"  }, 
  {   "trigger": "event.params\tshow",    "contents": "event.params"  }, 
  {   "trigger": "event.parent\thide",    "contents": "event.parent"  }, 
  {   "trigger": "event.parent\tshow",    "contents": "event.parent"  }, 
  {   "trigger": "event.particleSystem\tparticleCollision",    "contents": "event.particleSystem"  }, 
  {   "trigger": "event.phase\taudio",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tcollision",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\thide",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tkey",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tnetworkRequest",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tparticleCollision",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\trelativeTouch",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tshow",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tsprite",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\ttouch",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tuserInput",    "contents": "event.phase"  }, 
  {   "trigger": "event.phase\tvideo",    "contents": "event.phase"  }, 
  {   "trigger": "event.postalCode\tmapAddress",    "contents": "event.postalCode"  }, 
  {   "trigger": "event.pressure\ttouch",    "contents": "event.pressure"  }, 
  {   "trigger": "event.products\tproductList",    "contents": "event.products"  }, 
  {   "trigger": "event.provider\tgameNetwork",    "contents": "event.provider"  }, 
  {   "trigger": "event.provider\tlicensing",    "contents": "event.provider"  }, 
  {   "trigger": "event.r\tcolorSample",    "contents": "event.r"  }, 
  {   "trigger": "event.r\tparticleCollision",    "contents": "event.r"  }, 
  {   "trigger": "event.rawValue\taxis",    "contents": "event.rawValue"  }, 
  {   "trigger": "event.reconfigured\tinputDeviceStatus",    "contents": "event.reconfigured"  }, 
  {   "trigger": "event.region\tmapAddress",    "contents": "event.region"  }, 
  {   "trigger": "event.regionDetail\tmapAddress",    "contents": "event.regionDetail"  }, 
  {   "trigger": "event.request\tmapLocation",    "contents": "event.request"  }, 
  {   "trigger": "event.requestId\tnetworkRequest",    "contents": "event.requestId"  }, 
  {   "trigger": "event.response\tlicensing",    "contents": "event.response"  }, 
  {   "trigger": "event.response\tnetworkRequest",    "contents": "event.response"  }, 
  {   "trigger": "event.responseHeaders\tnetworkRequest",    "contents": "event.responseHeaders"  }, 
  {   "trigger": "event.responseType\tnetworkRequest",    "contents": "event.responseType"  }, 
  {   "trigger": "event.selfElement\tcollision",    "contents": "event.selfElement"  }, 
  {   "trigger": "event.selfElement\tpostCollision",    "contents": "event.selfElement"  }, 
  {   "trigger": "event.selfElement\tpreCollision",    "contents": "event.selfElement"  }, 
  {   "trigger": "event.sound\tnotification",    "contents": "event.sound"  }, 
  {   "trigger": "event.source\ttimer",    "contents": "event.source"  }, 
  {   "trigger": "event.speed\tlocation",    "contents": "event.speed"  }, 
  {   "trigger": "event.sprite\tsprite",    "contents": "event.sprite"  }, 
  {   "trigger": "event.stackTrace\tunhandledError",    "contents": "event.stackTrace"  }, 
  {   "trigger": "event.startPosition\tuserInput",    "contents": "event.startPosition"  }, 
  {   "trigger": "event.status\tnetworkRequest",    "contents": "event.status"  }, 
  {   "trigger": "event.street\tmapAddress",    "contents": "event.street"  }, 
  {   "trigger": "event.streetDetail\tmapAddress",    "contents": "event.streetDetail"  }, 
  {   "trigger": "event.tapCount\trelativeTouch",    "contents": "event.tapCount"  }, 
  {   "trigger": "event.target\tcollision",    "contents": "event.target"  }, 
  {   "trigger": "event.target\tcompletion",    "contents": "event.target"  }, 
  {   "trigger": "event.target\tfinalize",    "contents": "event.target"  }, 
  {   "trigger": "event.target\tpostCollision",    "contents": "event.target"  }, 
  {   "trigger": "event.target\tpreCollision",    "contents": "event.target"  }, 
  {   "trigger": "event.target\tsprite",    "contents": "event.target"  }, 
  {   "trigger": "event.target\ttouch",    "contents": "event.target"  }, 
  {   "trigger": "event.target\tuserInput",    "contents": "event.target"  }, 
  {   "trigger": "event.text\tuserInput",    "contents": "event.text"  }, 
  {   "trigger": "event.time\tenterFrame",    "contents": "event.time"  }, 
  {   "trigger": "event.time\tlateUpdate",    "contents": "event.time"  }, 
  {   "trigger": "event.time\tlocation",    "contents": "event.time"  }, 
  {   "trigger": "event.time\tmouse",    "contents": "event.time"  }, 
  {   "trigger": "event.time\trelativeTouch",    "contents": "event.time"  }, 
  {   "trigger": "event.time\ttimer",    "contents": "event.time"  }, 
  {   "trigger": "event.time\ttouch",    "contents": "event.time"  }, 
  {   "trigger": "event.transaction\tstoreTransaction",    "contents": "event.transaction"  }, 
  {   "trigger": "event.type\tgameNetwork",    "contents": "event.type"  }, 
  {   "trigger": "event.type\tmapLocation",    "contents": "event.type"  }, 
  {   "trigger": "event.type\tnotification",    "contents": "event.type"  }, 
  {   "trigger": "event.type\torientation",    "contents": "event.type"  }, 
  {   "trigger": "event.type\tpopup",    "contents": "event.type"  }, 
  {   "trigger": "event.type\tsystem",    "contents": "event.type"  }, 
  {   "trigger": "event.type\turlRequest",    "contents": "event.type"  }, 
  {   "trigger": "event.url\tcompletion",    "contents": "event.url"  }, 
  {   "trigger": "event.url\tnetworkRequest",    "contents": "event.url"  }, 
  {   "trigger": "event.url\tsystem",    "contents": "event.url"  }, 
  {   "trigger": "event.url\turlRequest",    "contents": "event.url"  }, 
  {   "trigger": "event.x\tcollision",    "contents": "event.x"  }, 
  {   "trigger": "event.x\tcolorSample",    "contents": "event.x"  }, 
  {   "trigger": "event.x\tmouse",    "contents": "event.x"  }, 
  {   "trigger": "event.x\tparticleCollision",    "contents": "event.x"  }, 
  {   "trigger": "event.x\tpostCollision",    "contents": "event.x"  }, 
  {   "trigger": "event.x\tpreCollision",    "contents": "event.x"  }, 
  {   "trigger": "event.x\trelativeTouch",    "contents": "event.x"  }, 
  {   "trigger": "event.x\ttap",    "contents": "event.x"  }, 
  {   "trigger": "event.x\ttouch",    "contents": "event.x"  }, 
  {   "trigger": "event.xGravity\taccelerometer",    "contents": "event.xGravity"  }, 
  {   "trigger": "event.xDelta\ttouch",    "contents": "event.xDelta"  }, 
  {   "trigger": "event.xInstant\taccelerometer",    "contents": "event.xInstant"  }, 
  {   "trigger": "event.xRaw\taccelerometer",    "contents": "event.xRaw"  }, 
  {   "trigger": "event.xRotation\tgyroscope",    "contents": "event.xRotation"  }, 
  {   "trigger": "event.xStart\ttouch",    "contents": "event.xStart"  }, 
  {   "trigger": "event.y\tcollision",    "contents": "event.y"  }, 
  {   "trigger": "event.y\tcolorSample",    "contents": "event.y"  }, 
  {   "trigger": "event.y\tmouse",    "contents": "event.y"  }, 
  {   "trigger": "event.y\tparticleCollision",    "contents": "event.y"  }, 
  {   "trigger": "event.y\tpostCollision",    "contents": "event.y"  }, 
  {   "trigger": "event.y\tpreCollision",    "contents": "event.y"  }, 
  {   "trigger": "event.y\trelativeTouch",    "contents": "event.y"  }, 
  {   "trigger": "event.y\ttap",    "contents": "event.y"  }, 
  {   "trigger": "event.y\ttouch",    "contents": "event.y"  }, 
  {   "trigger": "event.yGravity\taccelerometer",    "contents": "event.yGravity"  }, 
  {   "trigger": "event.yDelta\ttouch",    "contents": "event.yDelta"  }, 
  {   "trigger": "event.yInstant\taccelerometer",    "contents": "event.yInstant"  }, 
  {   "trigger": "event.yRaw\taccelerometer",    "contents": "event.yRaw"  }, 
  {   "trigger": "event.yRotation\tgyroscope",    "contents": "event.yRotation"  }, 
  {   "trigger": "event.yStart\ttouch",    "contents": "event.yStart"  }, 
  {   "trigger": "event.zGravity\taccelerometer",    "contents": "event.zGravity"  }, 
  {   "trigger": "event.zInstant\taccelerometer",    "contents": "event.zInstant"  }, 
  {   "trigger": "event.zRaw\taccelerometer",    "contents": "event.zRaw"  }, 
  {   "trigger": "event.zRotation\tgyroscope",    "contents": "event.zRotation"  }, 
  {   "trigger": "false\tKeyword",    "contents": "false"  }, 
  {   "trigger": "fill\tShapeObject",    "contents": "fill"  }, 
  {   "trigger": "fill.a\tPaint",    "contents": "fill.a"  }, 
  {   "trigger": "fill.b\tPaint",    "contents": "fill.b"  }, 
  {   "trigger": "fill.blendEquation\tPaint",    "contents": "fill.blendEquation"  }, 
  {   "trigger": "fill.blendMode\tPaint",    "contents": "fill.blendMode"  }, 
  {   "trigger": "fill.effect\tPaint",    "contents": "fill.effect"  }, 
  {   "trigger": "fill.frame\tImageSheetPaint",    "contents": "fill.frame"  }, 
  {   "trigger": "fill.g\tPaint",    "contents": "fill.g"  }, 
  {   "trigger": "fill.r\tPaint",    "contents": "fill.r"  }, 
  {   "trigger": "fill.rotation\tBitmapPaint",    "contents": "fill.rotation"  }, 
  {   "trigger": "fill.scaleX\tBitmapPaint",    "contents": "fill.scaleX"  }, 
  {   "trigger": "fill.scaleY\tBitmapPaint",    "contents": "fill.scaleY"  }, 
  {   "trigger": "fill.x\tBitmapPaint",    "contents": "fill.x"  }, 
  {   "trigger": "fill.y\tBitmapPaint",    "contents": "fill.y"  }, 
  {   "trigger": "font\tTextBox",    "contents": "font"  }, 
  {   "trigger": "font\tTextField",    "contents": "font"  }, 
  {   "trigger": "forward()\tWebView",    "contents": "forward( )"  }, 
  {   "trigger": "frame\tSpriteObject",    "contents": "frame"  }, 
  {   "trigger": "frequency\tJoint",    "contents": "frequency"  }, 
  {   "trigger": "gameNetwork.match\tGameNetwork",    "contents": "gameNetwork.match"  }, 
  {   "trigger": "gameNetwork.outcome\tGameNetwork",    "contents": "gameNetwork.outcome"  }, 
  {   "trigger": "gameNetwork.participant\tGameNetwork",    "contents": "gameNetwork.participant"  }, 
  {   "trigger": "gameNetwork.status\tGameNetwork",    "contents": "gameNetwork.status"  }, 
  {   "trigger": "getAddressLocation()\tMap",    "contents": "getAddressLocation( )"  }, 
  {   "trigger": "getAxes()\tInputDevice",    "contents": "getAxes( )"  }, 
  {   "trigger": "getContentPosition()\tScrollViewWidget",    "contents": "getContentPosition( )"  }, 
  {   "trigger": "getContentPosition()\tTableViewWidget",    "contents": "getContentPosition( )"  }, 
  {   "trigger": "getCurrentProvider()\tCoronaLibrary",    "contents": "getCurrentProvider( )"  }, 
  {   "trigger": "getLabel()\tButtonWidget",    "contents": "getLabel( )"  }, 
  {   "trigger": "getLinearVelocity()\tBody",    "contents": "getLinearVelocity( )"  }, 
  {   "trigger": "getMassLocalCenter()\tBody",    "contents": "getMassLocalCenter( )"  }, 
  {   "trigger": "getMassWorldCenter()\tBody",    "contents": "getMassWorldCenter( )"  }, 
  {   "trigger": "getNativeProperty()\tNativeDisplayObject",    "contents": "getNativeProperty( ${1:property} )"  }, 
  {   "trigger": "getNumRows()\tTableViewWidget",    "contents": "getNumRows( )"  }, 
  {   "trigger": "getProgress()\tProgressViewWidget",    "contents": "getProgress( )"  }, 
  {   "trigger": "getRowAtIndex()\tTableViewWidget",    "contents": "getRowAtIndex( ${1:rowIndex} )"  }, 
  {   "trigger": "getTarget()\tJoint",    "contents": "getTarget( )"  }, 
  {   "trigger": "getUserLocation()\tMap",    "contents": "getUserLocation( )"  }, 
  {   "trigger": "getValue()\tStepperWidget",    "contents": "getValue( )"  }, 
  {   "trigger": "getValues()\tPickerWheelWidget",    "contents": "getValues( )"  }, 
  {   "trigger": "getView()\tScrollViewWidget",    "contents": "getView( )"  }, 
  {   "trigger": "getfenv()\tglobal",    "contents": "getfenv( ${1:[f]} )"  }, 
  {   "trigger": "getmetatable()\tglobal",    "contents": "getmetatable( ${1:object} )"  }, 
  {   "trigger": "graphics.defineEffect()\tgraphics",    "contents": "graphics.defineEffect( ${1:effect} )"  }, 
  {   "trigger": "graphics.getFontMetrics()\tgraphics",    "contents": "graphics.getFontMetrics( ${1:fontName} ${2:[, fontSize]} )"  }, 
  {   "trigger": "graphics.newImageSheet()\tgraphics",    "contents": "graphics.newImageSheet( ${1:filename}, ${2:[baseDir, ]}, ${3:options} )"  }, 
  {   "trigger": "graphics.newMask()\tgraphics",    "contents": "graphics.newMask( ${1:filename} ${2:[, baseDir]} )"  }, 
  {   "trigger": "graphics.newOutline()\tgraphics",    "contents": "graphics.newOutline( ${1:coarsenessInTexels}, ${2:imageFileName} ${3:[, baseDir]} )"  }, 
  {   "trigger": "graphics.newOutline()\tgraphics",    "contents": "graphics.newOutline( ${1:coarsenessInTexels}, ${2:imageSheet}, ${3:frameIndex} )"  }, 
  {   "trigger": "graphics.newTexture()\tgraphics",    "contents": "graphics.newTexture( ${1:params} )"  }, 
  {   "trigger": "graphics.releaseTextures()\tgraphics",    "contents": "graphics.releaseTextures( ${1:params} )"  }, 
  {   "trigger": "gravityScale\tBody",    "contents": "gravityScale"  }, 
  {   "trigger": "insert()\tGroupObject",    "contents": "insert( ${1:[index,]}, ${2:child} ${3:[, resetTransform]} )"  }, 
  {   "trigger": "hasBackground\tTextBox",    "contents": "hasBackground"  }, 
  {   "trigger": "hasBackground\tTextField",    "contents": "hasBackground"  }, 
  {   "trigger": "hasBackground\tWebView",    "contents": "hasBackground"  }, 
  {   "trigger": "height\tDisplayObject",    "contents": "height"  }, 
  {   "trigger": "imageRadius\tParticleSystem",    "contents": "imageRadius"  }, 
  {   "trigger": "initialize()\tCoronaPrototype",    "contents": "initialize( )"  }, 
  {   "trigger": "inputType\tTextField",    "contents": "inputType"  }, 
  {   "trigger": "insertRow()\tTableViewWidget",    "contents": "insertRow( ${1:options} )"  }, 
  {   "trigger": "instanceOf()\tCoronaPrototype",    "contents": "instanceOf( ${1:class} )"  }, 
  {   "trigger": "io.close()\tio",    "contents": "io.close( ${1:[file]} )"  }, 
  {   "trigger": "io.flush()\tio",    "contents": "io.flush( )"  }, 
  {   "trigger": "io.input()\tio",    "contents": "io.input( ${1:file} )"  }, 
  {   "trigger": "io.lines()\tio",    "contents": "io.lines( ${1:file} )"  }, 
  {   "trigger": "io.open()\tio",    "contents": "io.open( ${1:file} ${2:[, mode]} )"  }, 
  {   "trigger": "io.output()\tio",    "contents": "io.output( ${1:[file]} )"  }, 
  {   "trigger": "io.read()\tio",    "contents": "io.read( ${1:[fmt1]} ${2:[, fmt2]} ${3:[, ...]} )"  }, 
  {   "trigger": "io.tmpfile()\tio",    "contents": "io.tmpfile( )"  }, 
  {   "trigger": "io.type()\tio",    "contents": "io.type( ${1:obj} )"  }, 
  {   "trigger": "io.write()\tio",    "contents": "io.write( ${1:arg1} ${2:[, arg2]} ${3:[, ...]} )"  }, 
  {   "trigger": "ipairs()\tglobal",    "contents": "ipairs( ${1:t} )"  }, 
  {   "trigger": "isActive\tJoint",    "contents": "isActive"  }, 
  {   "trigger": "isAwake\tBody",    "contents": "isAwake"  }, 
  {   "trigger": "isBodyActive\tBody",    "contents": "isBodyActive"  }, 
  {   "trigger": "isBullet\tBody",    "contents": "isBullet"  }, 
  {   "trigger": "isClass()\tCoronaPrototype",    "contents": "isClass( )"  }, 
  {   "trigger": "isCollideConnected\tJoint",    "contents": "isCollideConnected"  }, 
  {   "trigger": "isConnected\tInputDevice",    "contents": "isConnected"  }, 
  {   "trigger": "isEditable\tTextBox",    "contents": "isEditable"  }, 
  {   "trigger": "isFixedRotation\tBody",    "contents": "isFixedRotation"  }, 
  {   "trigger": "isFontSizeScaled\tTextBox",    "contents": "isFontSizeScaled"  }, 
  {   "trigger": "isFontSizeScaled\tTextField",    "contents": "isFontSizeScaled"  }, 
  {   "trigger": "isHitTestMasked\tDisplayObject",    "contents": "isHitTestMasked"  }, 
  {   "trigger": "isHitTestable\tDisplayObject",    "contents": "isHitTestable"  }, 
  {   "trigger": "isLimitEnabled\tJoint",    "contents": "isLimitEnabled"  }, 
  {   "trigger": "isLocationVisible\tMap",    "contents": "isLocationVisible"  }, 
  {   "trigger": "isMotorEnabled\tJoint",    "contents": "isMotorEnabled"  }, 
  {   "trigger": "isMuted\tVideo",    "contents": "isMuted"  }, 
  {   "trigger": "isOn\tSwitchWidget",    "contents": "isOn"  }, 
  {   "trigger": "isPlaying\tSpriteObject",    "contents": "isPlaying"  }, 
  {   "trigger": "isRoot()\tCoronaPrototype",    "contents": "isRoot( )"  }, 
  {   "trigger": "isScrollEnabled\tMap",    "contents": "isScrollEnabled"  }, 
  {   "trigger": "isSecure\tTextField",    "contents": "isSecure"  }, 
  {   "trigger": "isSensor\tBody",    "contents": "isSensor"  }, 
  {   "trigger": "isSleepingAllowed\tBody",    "contents": "isSleepingAllowed"  }, 
  {   "trigger": "isVisible\tDisplayObject",    "contents": "isVisible"  }, 
  {   "trigger": "isZoomEnabled\tMap",    "contents": "isZoomEnabled"  }, 
  {   "trigger": "joint1\tJoint",    "contents": "joint1"  }, 
  {   "trigger": "joint2\tJoint",    "contents": "joint2"  }, 
  {   "trigger": "getAnchorA()\tJoint",    "contents": "getAnchorA( )"  }, 
  {   "trigger": "getAnchorB()\tJoint",    "contents": "getAnchorB( )"  }, 
  {   "trigger": "getGroundAnchorA()\tJoint",    "contents": "getGroundAnchorA( )"  }, 
  {   "trigger": "getGroundAnchorB()\tJoint",    "contents": "getGroundAnchorB( )"  }, 
  {   "trigger": "getLimits()\tJoint",    "contents": "getLimits( )"  }, 
  {   "trigger": "getLocalAnchorA()\tJoint",    "contents": "getLocalAnchorA( )"  }, 
  {   "trigger": "getLocalAnchorB()\tJoint",    "contents": "getLocalAnchorB( )"  }, 
  {   "trigger": "getLocalAxisA()\tJoint",    "contents": "getLocalAxisA( )"  }, 
  {   "trigger": "getReactionForce()\tJoint",    "contents": "getReactionForce( )"  }, 
  {   "trigger": "getRotationLimits()\tJoint",    "contents": "getRotationLimits( )"  }, 
  {   "trigger": "setLimits()\tJoint",    "contents": "setLimits( ${1:negLimit}, ${2:posLimit} )"  }, 
  {   "trigger": "setRotationLimits()\tJoint",    "contents": "setRotationLimits( ${1:negLimit}, ${2:posLimit} )"  }, 
  {   "trigger": "jointAngle\tJoint",    "contents": "jointAngle"  }, 
  {   "trigger": "jointSpeed\tJoint",    "contents": "jointSpeed"  }, 
  {   "trigger": "jointTranslation\tJoint",    "contents": "jointTranslation"  }, 
  {   "trigger": "json.decode()\tjson",    "contents": "json.decode( ${1:data} ${2:[, position [, nullval]}, ${3:]} )"  }, 
  {   "trigger": "json.decodeFile()\tjson",    "contents": "json.decodeFile( ${1:filename} ${2:[, position [, nullval]}, ${3:]} )"  }, 
  {   "trigger": "json.encode()\tjson",    "contents": "json.encode( ${1:t} ${2:[, options]} )"  }, 
  {   "trigger": "json.prettify()\tjson",    "contents": "json.prettify( ${1:obj} )"  }, 
  {   "trigger": "length\tJoint",    "contents": "length"  }, 
  {   "trigger": "length1\tJoint",    "contents": "length1"  }, 
  {   "trigger": "length2\tJoint",    "contents": "length2"  }, 
  {   "trigger": "licensing.init()\tlicensing",    "contents": "licensing.init( ${1:providerName} )"  }, 
  {   "trigger": "licensing.verify()\tlicensing",    "contents": "licensing.verify( ${1:listener} )"  }, 
  {   "trigger": "limitState\tJoint",    "contents": "limitState"  }, 
  {   "trigger": "linearDamping\tBody",    "contents": "linearDamping"  }, 
  {   "trigger": "load()\tVideo",    "contents": "load( ${1:path} )"  }, 
  {   "trigger": "load()\tVideo",    "contents": "load( ${1:path}, ${2:baseSource} )"  }, 
  {   "trigger": "localToContent()\tDisplayObject",    "contents": "localToContent( ${1:x}, ${2:y} )"  }, 
  {   "trigger": "mapType\tMap",    "contents": "mapType"  }, 
  {   "trigger": "maskRotation\tDisplayObject",    "contents": "maskRotation"  }, 
  {   "trigger": "maskScaleX\tDisplayObject",    "contents": "maskScaleX"  }, 
  {   "trigger": "maskScaleY\tDisplayObject",    "contents": "maskScaleY"  }, 
  {   "trigger": "maskX\tDisplayObject",    "contents": "maskX"  }, 
  {   "trigger": "maskY\tDisplayObject",    "contents": "maskY"  }, 
  {   "trigger": "mass\tBody",    "contents": "mass"  }, 
  {   "trigger": "math.abs()\tmath",    "contents": "math.abs( ${1:x} )"  }, 
  {   "trigger": "math.acos()\tmath",    "contents": "math.acos( ${1:x} )"  }, 
  {   "trigger": "math.asin()\tmath",    "contents": "math.asin( ${1:x} )"  }, 
  {   "trigger": "math.atan()\tmath",    "contents": "math.atan( ${1:x} )"  }, 
  {   "trigger": "math.atan2()\tmath",    "contents": "math.atan2( ${1:y}, ${2:x} )"  }, 
  {   "trigger": "math.ceil()\tmath",    "contents": "math.ceil( ${1:x} )"  }, 
  {   "trigger": "math.cos()\tmath",    "contents": "math.cos( ${1:x} )"  }, 
  {   "trigger": "math.cosh()\tmath",    "contents": "math.cosh( ${1:x} )"  }, 
  {   "trigger": "math.deg()\tmath",    "contents": "math.deg( ${1:x} )"  }, 
  {   "trigger": "math.exp()\tmath",    "contents": "math.exp( ${1:x} )"  }, 
  {   "trigger": "math.floor()\tmath",    "contents": "math.floor( ${1:x} )"  }, 
  {   "trigger": "math.fmod()\tmath",    "contents": "math.fmod( ${1:x}, ${2:y} )"  }, 
  {   "trigger": "math.frexp()\tmath",    "contents": "math.frexp( ${1:x} )"  }, 
  {   "trigger": "math.huge\tmath",    "contents": "math.huge"  }, 
  {   "trigger": "math.inf\tmath",    "contents": "math.inf"  }, 
  {   "trigger": "math.ldexp()\tmath",    "contents": "math.ldexp( ${1:m}, ${2:e} )"  }, 
  {   "trigger": "math.log()\tmath",    "contents": "math.log( ${1:x} )"  }, 
  {   "trigger": "math.log10()\tmath",    "contents": "math.log10( ${1:x} )"  }, 
  {   "trigger": "math.max()\tmath",    "contents": "math.max( ${1:x}, ${2:...} )"  }, 
  {   "trigger": "math.min()\tmath",    "contents": "math.min( ${1:x}, ${2:...} )"  }, 
  {   "trigger": "math.modf()\tmath",    "contents": "math.modf( ${1:x} )"  }, 
  {   "trigger": "math.pi\tmath",    "contents": "math.pi"  }, 
  {   "trigger": "math.pow()\tmath",    "contents": "math.pow( ${1:x}, ${2:y} )"  }, 
  {   "trigger": "math.rad()\tmath",    "contents": "math.rad( ${1:x} )"  }, 
  {   "trigger": "math.random()\tmath",    "contents": "math.random( ${1:m} )"  }, 
  {   "trigger": "math.random()\tmath",    "contents": "math.random( ${1:m}, ${2:n} )"  }, 
  {   "trigger": "math.random()\tmath",    "contents": "math.random( )"  }, 
  {   "trigger": "math.randomseed()\tmath",    "contents": "math.randomseed( ${1:seed} )"  }, 
  {   "trigger": "math.round()\tmath",    "contents": "math.round( ${1:x} )"  }, 
  {   "trigger": "math.sin()\tmath",    "contents": "math.sin( ${1:x} )"  }, 
  {   "trigger": "math.sinh()\tmath",    "contents": "math.sinh( ${1:x} )"  }, 
  {   "trigger": "math.sqrt()\tmath",    "contents": "math.sqrt( ${1:x} )"  }, 
  {   "trigger": "math.tan()\tmath",    "contents": "math.tan( ${1:x} )"  }, 
  {   "trigger": "math.tanh()\tmath",    "contents": "math.tanh( ${1:x} )"  }, 
  {   "trigger": "maxForce\tJoint",    "contents": "maxForce"  }, 
  {   "trigger": "maxLength\tJoint",    "contents": "maxLength"  }, 
  {   "trigger": "maxMotorForce\tJoint",    "contents": "maxMotorForce"  }, 
  {   "trigger": "maxMotorTorque\tJoint",    "contents": "maxMotorTorque"  }, 
  {   "trigger": "maxTorque\tJoint",    "contents": "maxTorque"  }, 
  {   "trigger": "maxValue\tInputAxis",    "contents": "maxValue"  }, 
  {   "trigger": "maximumValue\tStepperWidget",    "contents": "maximumValue"  }, 
  {   "trigger": "media.RemoteSource\tmedia",    "contents": "media.RemoteSource"  }, 
  {   "trigger": "media.capturePhoto()\tmedia",    "contents": "media.capturePhoto( ${1:{ listener} ${2:[, destination]}, ${3:}} )"  }, 
  {   "trigger": "media.captureVideo()\tmedia",    "contents": "media.captureVideo( ${1:{ listener} ${2:[, preferredQuality]} ${3:[, preferredMaxDuration]}, ${4:}} )"  }, 
  {   "trigger": "media.getSoundVolume()\tmedia",    "contents": "media.getSoundVolume( )"  }, 
  {   "trigger": "media.hasSource()\tmedia",    "contents": "media.hasSource( ${1:mediaSource} )"  }, 
  {   "trigger": "media.newEventSound()\tmedia",    "contents": "media.newEventSound( ${1:audioFileName} ${2:[, baseDir]} )"  }, 
  {   "trigger": "media.newRecording()\tmedia",    "contents": "media.newRecording( ${1:[path]} )"  }, 
  {   "trigger": "media.pauseSound()\tmedia",    "contents": "media.pauseSound( )"  }, 
  {   "trigger": "media.playEventSound()\tmedia",    "contents": "media.playEventSound( ${1:sound} ${2:[, baseDir]} ${3:[, completionListener]} )"  }, 
  {   "trigger": "media.playSound()\tmedia",    "contents": "media.playSound( ${1:soundfile} ${2:[, baseDir]} ${3:[, loop]} )"  }, 
  {   "trigger": "media.playSound()\tmedia",    "contents": "media.playSound( ${1:soundfile} ${2:[, baseDir]} ${3:[, onComplete]} )"  }, 
  {   "trigger": "media.playVideo()\tmedia",    "contents": "media.playVideo( ${1:path} ${2:[, baseSource ]}, ${3:showControls}, ${4:listener} )"  }, 
  {   "trigger": "media.save()\tmedia",    "contents": "media.save( ${1:filename} ${2:[, baseDir]} )"  }, 
  {   "trigger": "media.selectPhoto()\tmedia",    "contents": "media.selectPhoto( ${1:{ listener} ${2:[, mediaSource]} ${3:[, destination]} ${4:[, origin]} ${5:[, permittedArrowDirections]}, ${6:}} )"  }, 
  {   "trigger": "media.selectPhoto()\tmedia",    "contents": "media.selectPhoto( ${1:{ listener=sessionComplete }} )"  }, 
  {   "trigger": "media.selectVideo()\tmedia",    "contents": "media.selectVideo( ${1:{ listener} ${2:[, mediaSource]} ${3:[, origin]} ${4:[, permittedArrowDirections]}, ${5:}} )"  }, 
  {   "trigger": "media.setSoundVolume()\tmedia",    "contents": "media.setSoundVolume( ${1:volume} )"  }, 
  {   "trigger": "media.show()\tmedia",    "contents": "media.show( )"  }, 
  {   "trigger": "media.stopSound()\tmedia",    "contents": "media.stopSound( )"  }, 
  {   "trigger": "minValue\tInputAxis",    "contents": "minValue"  }, 
  {   "trigger": "minimumValue\tStepperWidget",    "contents": "minimumValue"  }, 
  {   "trigger": "motorForce\tJoint",    "contents": "motorForce"  }, 
  {   "trigger": "motorSpeed\tJoint",    "contents": "motorSpeed"  }, 
  {   "trigger": "motorTorque\tJoint",    "contents": "motorTorque"  }, 
  {   "trigger": "name\tCoronaLibrary",    "contents": "name"  }, 
  {   "trigger": "native.canShowPopup()\tnative",    "contents": "native.canShowPopup( ${1:name} )"  }, 
  {   "trigger": "native.cancelAlert()\tnative",    "contents": "native.cancelAlert( ${1:alert} )"  }, 
  {   "trigger": "native.cancelWebPopup()\tnative",    "contents": "native.cancelWebPopup( )"  }, 
  {   "trigger": "native.getFontNames()\tnative",    "contents": "native.getFontNames( )"  }, 
  {   "trigger": "native.getProperty()\tnative",    "contents": "native.getProperty( ${1:key} )"  }, 
  {   "trigger": "native.getSync()\tnative",    "contents": "native.getSync( ${1:filename}, ${2:params} )"  }, 
  {   "trigger": "native.newFont()\tnative",    "contents": "native.newFont( ${1:name} ${2:[, size]} )"  }, 
  {   "trigger": "native.newMapView()\tnative",    "contents": "native.newMapView( ${1:x}, ${2:y}, ${3:width}, ${4:height} )"  }, 
  {   "trigger": "native.newTextBox()\tnative",    "contents": "native.newTextBox( ${1:x}, ${2:y}, ${3:width}, ${4:height} )"  }, 
  {   "trigger": "native.newTextField()\tnative",    "contents": "native.newTextField( ${1:x}, ${2:y}, ${3:width}, ${4:height} )"  }, 
  {   "trigger": "native.newVideo()\tnative",    "contents": "native.newVideo( ${1:x}, ${2:y}, ${3:width}, ${4:height} )"  }, 
  {   "trigger": "native.newWebView()\tnative",    "contents": "native.newWebView( ${1:x}, ${2:y}, ${3:width}, ${4:height} )"  }, 
  {   "trigger": "native.requestExit()\tnative",    "contents": "native.requestExit( )"  }, 
  {   "trigger": "native.setActivityIndicator()\tnative",    "contents": "native.setActivityIndicator( ${1:state} )"  }, 
  {   "trigger": "native.setKeyboardFocus()\tnative",    "contents": "native.setKeyboardFocus( ${1:textField} )"  }, 
  {   "trigger": "native.setProperty()\tnative",    "contents": "native.setProperty( ${1:key}, ${2:value} )"  }, 
  {   "trigger": "native.setSync()\tnative",    "contents": "native.setSync( ${1:filename}, ${2:params} )"  }, 
  {   "trigger": "native.showAlert()\tnative",    "contents": "native.showAlert( ${1:title}, ${2:message} ${3:[, buttonLabels [, listener]}, ${4:]} )"  }, 
  {   "trigger": "native.showPopup()\tnative",    "contents": "native.showPopup( ${1:name} )"  }, 
  {   "trigger": "native.showPopup()\tnative",    "contents": "native.showPopup( ${1:name}, ${2:options} )"  }, 
  {   "trigger": "native.showWebPopup()\tnative",    "contents": "native.showWebPopup( ${1:[x, y, width, height,]}, ${2:url}, ${3:[options]} )"  }, 
  {   "trigger": "native.systemFont\tnative",    "contents": "native.systemFont"  }, 
  {   "trigger": "native.systemFontBold\tnative",    "contents": "native.systemFontBold"  }, 
  {   "trigger": "nearestAddress()\tMap",    "contents": "nearestAddress( ${1:latitude}, ${2:longitude}, ${3:resultHandler} )"  }, 
  {   "trigger": "network.canDetectNetworkStatusChanges\tnetwork",    "contents": "network.canDetectNetworkStatusChanges"  }, 
  {   "trigger": "network.cancel()\tnetwork",    "contents": "network.cancel( ${1:requestId} )"  }, 
  {   "trigger": "network.download()\tnetwork",    "contents": "network.download( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]}, ${5:filename} ${6:[, baseDirectory]} )"  }, 
  {   "trigger": "network.request()\tnetwork",    "contents": "network.request( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]} )"  }, 
  {   "trigger": "network.setStatusListener()\tnetwork",    "contents": "network.setStatusListener( ${1:hostURL}, ${2:listener} )"  }, 
  {   "trigger": "network.upload()\tnetwork",    "contents": "network.upload( ${1:url}, ${2:method}, ${3:listener} ${4:[, params]}, ${5:filename} ${6:[, baseDirectory]} ${7:[, contentType]} )"  }, 
  {   "trigger": "new()\tCoronaPrototype",    "contents": "new( ${1:params} )"  }, 
  {   "trigger": "new()\tCoronaPrototype",    "contents": "new( )"  }, 
  {   "trigger": "newClass()\tCoronaPrototype",    "contents": "newClass( ${1:name} )"  }, 
  {   "trigger": "next()\tglobal",    "contents": "next( ${1:array} ${2:[, index]} )"  }, 
  {   "trigger": "nil\tKeyword",    "contents": "nil"  }, 
  {   "trigger": "numChildren\tGroupObject",    "contents": "numChildren"  }, 
  {   "trigger": "numFrames\tSpriteObject",    "contents": "numFrames"  }, 
  {   "trigger": "number\tInputAxis",    "contents": "number"  }, 
  {   "trigger": "os.clock()\tos",    "contents": "os.clock( )"  }, 
  {   "trigger": "os.date()\tos",    "contents": "os.date( ${1:[format [, time]}, ${2:]} )"  }, 
  {   "trigger": "os.difftime()\tos",    "contents": "os.difftime( ${1:t1}, ${2:t2} )"  }, 
  {   "trigger": "os.execute()\tos",    "contents": "os.execute( ${1:cmd} )"  }, 
  {   "trigger": "os.exit()\tos",    "contents": "os.exit( ${1:[ exit ]} )"  }, 
  {   "trigger": "os.remove()\tos",    "contents": "os.remove( ${1:file} )"  }, 
  {   "trigger": "os.rename()\tos",    "contents": "os.rename( ${1:oldname}, ${2:newname} )"  }, 
  {   "trigger": "os.time()\tos",    "contents": "os.time( ${1:table} )"  }, 
  {   "trigger": "package.loaded\tpackage",    "contents": "package.loaded"  }, 
  {   "trigger": "package.loaders\tpackage",    "contents": "package.loaders"  }, 
  {   "trigger": "pairs()\tglobal",    "contents": "pairs( ${1:t} )"  }, 
  {   "trigger": "parent\tDisplayObject",    "contents": "parent"  }, 
  {   "trigger": "particleCount\tParticleSystem",    "contents": "particleCount"  }, 
  {   "trigger": "particleDamping\tParticleSystem",    "contents": "particleDamping"  }, 
  {   "trigger": "particleDensity\tParticleSystem",    "contents": "particleDensity"  }, 
  {   "trigger": "particleDestructionByAge\tParticleSystem",    "contents": "particleDestructionByAge"  }, 
  {   "trigger": "particleGravityScale\tParticleSystem",    "contents": "particleGravityScale"  }, 
  {   "trigger": "particleMass\tParticleSystem",    "contents": "particleMass"  }, 
  {   "trigger": "particleMaxCount\tParticleSystem",    "contents": "particleMaxCount"  }, 
  {   "trigger": "particlePaused\tParticleSystem",    "contents": "particlePaused"  }, 
  {   "trigger": "particleRadius\tParticleSystem",    "contents": "particleRadius"  }, 
  {   "trigger": "particleStrictContactCheck\tParticleSystem",    "contents": "particleStrictContactCheck"  }, 
  {   "trigger": "applyForce()\tParticleSystem",    "contents": "applyForce( ${1:xForce}, ${2:yForce} )"  }, 
  {   "trigger": "applyLinearImpulse()\tParticleSystem",    "contents": "applyLinearImpulse( ${1:xForce}, ${2:yForce} )"  }, 
  {   "trigger": "path\tShapeObject",    "contents": "path"  }, 
  {   "trigger": "pause()\tSpriteObject",    "contents": "pause( )"  }, 
  {   "trigger": "pause()\tVideo",    "contents": "pause( )"  }, 
  {   "trigger": "pcall()\tglobal",    "contents": "pcall( ${1:f} ${2:[, ...]} )"  }, 
  {   "trigger": "permanentId\tInputDevice",    "contents": "permanentId"  }, 
  {   "trigger": "physics.addBody()\tphysics",    "contents": "physics.addBody( ${1:object}, ${2:[bodyType,]}, ${3:[params]} )"  }, 
  {   "trigger": "physics.engineVersion\tphysics",    "contents": "physics.engineVersion"  }, 
  {   "trigger": "physics.fromMKS()\tphysics",    "contents": "physics.fromMKS( ${1:unitName}, ${2:value} )"  }, 
  {   "trigger": "physics.getAverageCollisionPositions()\tphysics",    "contents": "physics.getAverageCollisionPositions( )"  }, 
  {   "trigger": "physics.getDebugErrorsEnabled()\tphysics",    "contents": "physics.getDebugErrorsEnabled( )"  }, 
  {   "trigger": "physics.getGravity()\tphysics",    "contents": "physics.getGravity( )"  }, 
  {   "trigger": "physics.getMKS()\tphysics",    "contents": "physics.getMKS( ${1:key} )"  }, 
  {   "trigger": "physics.getReportCollisionsInContentCoordinates()\tphysics",    "contents": "physics.getReportCollisionsInContentCoordinates( )"  }, 
  {   "trigger": "physics.getTimeScale()\tphysics",    "contents": "physics.getTimeScale( )"  }, 
  {   "trigger": "physics.newJoint()\tphysics",    "contents": "physics.newJoint( ${1:jointType}, ${2:...} )"  }, 
  {   "trigger": "physics.newParticleSystem()\tphysics",    "contents": "physics.newParticleSystem( ${1:params} )"  }, 
  {   "trigger": "physics.pause()\tphysics",    "contents": "physics.pause( )"  }, 
  {   "trigger": "physics.queryRegion()\tphysics",    "contents": "physics.queryRegion( ${1:upperLeftX}, ${2:upperLeftY}, ${3:lowerRightX}, ${4:lowerRightY} )"  }, 
  {   "trigger": "physics.rayCast()\tphysics",    "contents": "physics.rayCast( ${1:fromX}, ${2:fromY}, ${3:toX}, ${4:toY}, ${5:behavior} )"  }, 
  {   "trigger": "physics.reflectRay()\tphysics",    "contents": "physics.reflectRay( ${1:fromX}, ${2:fromY}, ${3:hit} )"  }, 
  {   "trigger": "physics.removeBody()\tphysics",    "contents": "physics.removeBody( ${1:object} )"  }, 
  {   "trigger": "physics.setAverageCollisionPositions()\tphysics",    "contents": "physics.setAverageCollisionPositions( ${1:enabled} )"  }, 
  {   "trigger": "physics.setContinuous()\tphysics",    "contents": "physics.setContinuous( ${1:enabled} )"  }, 
  {   "trigger": "physics.setDebugErrorsEnabled()\tphysics",    "contents": "physics.setDebugErrorsEnabled( ${1:enabled} )"  }, 
  {   "trigger": "physics.setDrawMode()\tphysics",    "contents": "physics.setDrawMode( ${1:mode} )"  }, 
  {   "trigger": "physics.setGravity()\tphysics",    "contents": "physics.setGravity( ${1:gx}, ${2:gy} )"  }, 
  {   "trigger": "physics.setMKS()\tphysics",    "contents": "physics.setMKS( ${1:key}, ${2:value} )"  }, 
  {   "trigger": "physics.setPositionIterations()\tphysics",    "contents": "physics.setPositionIterations( ${1:value} )"  }, 
  {   "trigger": "physics.setReportCollisionsInContentCoordinates()\tphysics",    "contents": "physics.setReportCollisionsInContentCoordinates( ${1:enabled} )"  }, 
  {   "trigger": "physics.setScale()\tphysics",    "contents": "physics.setScale( ${1:value} )"  }, 
  {   "trigger": "physics.setTimeScale()\tphysics",    "contents": "physics.setTimeScale( ${1:scale} )"  }, 
  {   "trigger": "physics.setTimeStep()\tphysics",    "contents": "physics.setTimeStep( ${1:dt} )"  }, 
  {   "trigger": "physics.setVelocityIterations()\tphysics",    "contents": "physics.setVelocityIterations( ${1:value} )"  }, 
  {   "trigger": "physics.start()\tphysics",    "contents": "physics.start( )"  }, 
  {   "trigger": "physics.stop()\tphysics",    "contents": "physics.stop( )"  }, 
  {   "trigger": "physics.toMKS()\tphysics",    "contents": "physics.toMKS( ${1:unitName}, ${2:value} )"  }, 
  {   "trigger": "placeholder\tTextBox",    "contents": "placeholder"  }, 
  {   "trigger": "placeholder\tTextField",    "contents": "placeholder"  }, 
  {   "trigger": "play()\tSpriteObject",    "contents": "play( )"  }, 
  {   "trigger": "play()\tVideo",    "contents": "play( )"  }, 
  {   "trigger": "playerNumber\tInputDevice",    "contents": "playerNumber"  }, 
  {   "trigger": "print()\tglobal",    "contents": "print( ${1:[...]} )"  }, 
  {   "trigger": "productName\tInputDevice",    "contents": "productName"  }, 
  {   "trigger": "publisherId\tCoronaLibrary",    "contents": "publisherId"  }, 
  {   "trigger": "ratio\tJoint",    "contents": "ratio"  }, 
  {   "trigger": "rawequal()\tglobal",    "contents": "rawequal( ${1:value1}, ${2:value2} )"  }, 
  {   "trigger": "rawget()\tglobal",    "contents": "rawget( ${1:table}, ${2:index} )"  }, 
  {   "trigger": "rawset()\tglobal",    "contents": "rawset( ${1:table}, ${2:index}, ${3:value} )"  }, 
  {   "trigger": "reactionTorque\tJoint",    "contents": "reactionTorque"  }, 
  {   "trigger": "getSampleRate()\tRecording",    "contents": "getSampleRate( )"  }, 
  {   "trigger": "referenceAngle\tJoint",    "contents": "referenceAngle"  }, 
  {   "trigger": "reload()\tWebView",    "contents": "reload( )"  }, 
  {   "trigger": "reloadData()\tTableViewWidget",    "contents": "reloadData( )"  }, 
  {   "trigger": "remove()\tGroupObject",    "contents": "remove( ${1:indexOrChild} )"  }, 
  {   "trigger": "removeAllMarkers()\tMap",    "contents": "removeAllMarkers( )"  }, 
  {   "trigger": "removeEventListener()\tEventDispatcher",    "contents": "removeEventListener( ${1:eventName}, ${2:listener} )"  }, 
  {   "trigger": "removeMarker()\tMap",    "contents": "removeMarker( ${1:markerID} )"  }, 
  {   "trigger": "removeSelf()\tDisplayObject",    "contents": "removeSelf( )"  }, 
  {   "trigger": "removeSelf()\tJoint",    "contents": "removeSelf( )"  }, 
  {   "trigger": "reportsAbsoluteDpadValues\tInputDevice",    "contents": "reportsAbsoluteDpadValues"  }, 
  {   "trigger": "request()\tWebView",    "contents": "request( ${1:url} )"  }, 
  {   "trigger": "request()\tWebView",    "contents": "request( ${1:url}, ${2:baseDir} )"  }, 
  {   "trigger": "requestLocation()\tMap",    "contents": "requestLocation( ${1:location}, ${2:resultHandler} )"  }, 
  {   "trigger": "none;\">X</span>e()\tpackage",    "contents": "none;\">X</span>e( )"  }, 
  {   "trigger": "resetMassData()\tBody",    "contents": "resetMassData( )"  }, 
  {   "trigger": "resizeFontToFitHeight()\tTextField",    "contents": "resizeFontToFitHeight( )"  }, 
  {   "trigger": "resizeHeightToFitFont()\tTextField",    "contents": "resizeHeightToFitFont( )"  }, 
  {   "trigger": "resizeView()\tProgressViewWidget",    "contents": "resizeView( ${1:newWidth} )"  }, 
  {   "trigger": "revision\tCoronaLibrary",    "contents": "revision"  }, 
  {   "trigger": "rotate()\tDisplayObject",    "contents": "rotate( ${1:deltaAngle} )"  }, 
  {   "trigger": "rotation\tDisplayObject",    "contents": "rotation"  }, 
  {   "trigger": "byte()\tstring",    "contents": "byte( ${1:[, i [, j]}, ${2:]} )"  }, 
  {   "trigger": "gmatch()\tstring",    "contents": "gmatch( ${1:pattern} )"  }, 
  {   "trigger": "lower()\tstring",    "contents": "lower( )"  }, 
  {   "trigger": "match()\tstring",    "contents": "match( ${1:pattern} ${2:[, init]} )"  }, 
  {   "trigger": "rep()\tstring",    "contents": "rep( ${1:n} )"  }, 
  {   "trigger": "reverse()\tstring",    "contents": "reverse( )"  }, 
  {   "trigger": "sub()\tstring",    "contents": "sub( ${1:i} ${2:[,j]} )"  }, 
  {   "trigger": "upper()\tstring",    "contents": "upper( )"  }, 
  {   "trigger": "scale()\tDisplayObject",    "contents": "scale( ${1:xScale}, ${2:yScale} )"  }, 
  {   "trigger": "scrollTo()\tScrollViewWidget",    "contents": "scrollTo( ${1:position}, ${2:options} )"  }, 
  {   "trigger": "scrollToIndex()\tTableViewWidget",    "contents": "scrollToIndex( ${1:rowIndex}, ${2:time}, ${3:onComplete} )"  }, 
  {   "trigger": "scrollToPosition()\tScrollViewWidget",    "contents": "scrollToPosition( ${1:options} )"  }, 
  {   "trigger": "scrollToY()\tTableViewWidget",    "contents": "scrollToY( ${1:options} )"  }, 
  {   "trigger": "seek()\tVideo",    "contents": "seek( ${1:timeInSeconds} )"  }, 
  {   "trigger": "segmentLabel\tSegmentedControlWidget",    "contents": "segmentLabel"  }, 
  {   "trigger": "segmentNumber\tSegmentedControlWidget",    "contents": "segmentNumber"  }, 
  {   "trigger": "select()\tglobal",    "contents": "select( ${1:index}, ${2:...} )"  }, 
  {   "trigger": "selectValue()\tPickerWheelWidget",    "contents": "selectValue( ${1:targetColumn}, ${2:targetIndex} ${3:[, snapToIndex]} )"  }, 
  {   "trigger": "sequence\tSpriteObject",    "contents": "sequence"  }, 
  {   "trigger": "setActiveSegment()\tSegmentedControlWidget",    "contents": "setActiveSegment( ${1:segmentNumber} )"  }, 
  {   "trigger": "setCenter()\tMap",    "contents": "setCenter( ${1:latitude}, ${2:longitude} ${3:[, isAnimated]} )"  }, 
  {   "trigger": "setCurrentProvider()\tCoronaLibrary",    "contents": "setCurrentProvider( ${1:provider} )"  }, 
  {   "trigger": "setEmbossColor()\tTextObject",    "contents": "setEmbossColor( ${1:colorTable} )"  }, 
  {   "trigger": "setEnabled()\tButtonWidget",    "contents": "setEnabled( ${1:isEnabled} )"  }, 
  {   "trigger": "setExtension()\tCoronaPrototype",    "contents": "setExtension( ${1:indexFunc} )"  }, 
  {   "trigger": "setFillColor()\tShapeObject",    "contents": "setFillColor( ${1:gradient} )"  }, 
  {   "trigger": "setFillColor()\tShapeObject",    "contents": "setFillColor( ${1:gray} )"  }, 
  {   "trigger": "setFillColor()\tShapeObject",    "contents": "setFillColor( ${1:gray}, ${2:alpha} )"  }, 
  {   "trigger": "setFillColor()\tShapeObject",    "contents": "setFillColor( ${1:red}, ${2:green}, ${3:blue} )"  }, 
  {   "trigger": "setFillColor()\tShapeObject",    "contents": "setFillColor( ${1:red}, ${2:green}, ${3:blue}, ${4:alpha} )"  }, 
  {   "trigger": "setFrame()\tSpriteObject",    "contents": "setFrame( ${1:frameIndex} )"  }, 
  {   "trigger": "setIsLocked()\tScrollViewWidget",    "contents": "setIsLocked( ${1:isLocked} ${2:[, axis]} )"  }, 
  {   "trigger": "setLabel()\tButtonWidget",    "contents": "setLabel( ${1:label} )"  }, 
  {   "trigger": "setLinearVelocity()\tBody",    "contents": "setLinearVelocity( ${1:xVelocity}, ${2:yVelocity} )"  }, 
  {   "trigger": "setMask()\tDisplayObject",    "contents": "setMask( ${1:mask} )"  }, 
  {   "trigger": "setNativeProperty()\tNativeDisplayObject",    "contents": "setNativeProperty( ${1:property}, ${2:value} )"  }, 
  {   "trigger": "setProgress()\tProgressViewWidget",    "contents": "setProgress( ${1:progress} )"  }, 
  {   "trigger": "setRegion()\tMap",    "contents": "setRegion( ${1:latitude}, ${2:longitude}, ${3:latitudeSpan}, ${4:longitudeSpan} ${5:[, isAnimated]} )"  }, 
  {   "trigger": "setReturnKey()\tTextBox",    "contents": "setReturnKey( ${1:key} )"  }, 
  {   "trigger": "setReturnKey()\tTextField",    "contents": "setReturnKey( ${1:key} )"  }, 
  {   "trigger": "setScrollHeight()\tScrollViewWidget",    "contents": "setScrollHeight( ${1:newHeight} )"  }, 
  {   "trigger": "setScrollWidth()\tScrollViewWidget",    "contents": "setScrollWidth( ${1:newWidth} )"  }, 
  {   "trigger": "setSelected()\tTabBarWidget",    "contents": "setSelected( ${1:buttonIndex} )"  }, 
  {   "trigger": "setSelected()\tTabBarWidget",    "contents": "setSelected( ${1:buttonIndex}, ${2:simulatePress} )"  }, 
  {   "trigger": "setSelection()\tTextBox",    "contents": "setSelection( ${1:startPosition}, ${2:endPosition} )"  }, 
  {   "trigger": "setSelection()\tTextField",    "contents": "setSelection( ${1:startPosition}, ${2:endPosition} )"  }, 
  {   "trigger": "setSequence()\tSpriteObject",    "contents": "setSequence( ${1:[ sequenceName ]} )"  }, 
  {   "trigger": "setState()\tSwitchWidget",    "contents": "setState( ${1:options} )"  }, 
  {   "trigger": "setStrokeColor()\tShapeObject",    "contents": "setStrokeColor( ${1:gray} )"  }, 
  {   "trigger": "setStrokeColor()\tShapeObject",    "contents": "setStrokeColor( ${1:gray}, ${2:alpha} )"  }, 
  {   "trigger": "setStrokeColor()\tShapeObject",    "contents": "setStrokeColor( ${1:red}, ${2:green}, ${3:blue} )"  }, 
  {   "trigger": "setStrokeColor()\tShapeObject",    "contents": "setStrokeColor( ${1:red}, ${2:green}, ${3:blue}, ${4:alpha} )"  }, 
  {   "trigger": "setTarget()\tJoint",    "contents": "setTarget( ${1:targetX}, ${2:targetY} )"  }, 
  {   "trigger": "setTextColor()\tTextBox",    "contents": "setTextColor( ${1:r}, ${2:g}, ${3:b} )"  }, 
  {   "trigger": "setTextColor()\tTextField",    "contents": "setTextColor( ${1:r}, ${2:g}, ${3:b} )"  }, 
  {   "trigger": "setTextColor()\tTextBox",    "contents": "setTextColor( ${1:r}, ${2:g}, ${3:b}, ${4:a} )"  }, 
  {   "trigger": "setTextColor()\tTextField",    "contents": "setTextColor( ${1:r}, ${2:g}, ${3:b}, ${4:a} )"  }, 
  {   "trigger": "setValue()\tSliderWidget",    "contents": "setValue( ${1:percent} )"  }, 
  {   "trigger": "setValue()\tStepperWidget",    "contents": "setValue( ${1:value} )"  }, 
  {   "trigger": "setfenv()\tglobal",    "contents": "setfenv( ${1:f}, ${2:table} )"  }, 
  {   "trigger": "setmetatable()\tglobal",    "contents": "setmetatable( ${1:table}, ${2:metatable} )"  }, 
  {   "trigger": "size\tTextBox",    "contents": "size"  }, 
  {   "trigger": "size\tTextField",    "contents": "size"  }, 
  {   "trigger": "size\tTextObject",    "contents": "size"  }, 
  {   "trigger": "snapshot.canvas\tSnapshotObject",    "contents": "snapshot.canvas"  }, 
  {   "trigger": "snapshot.canvasMode\tSnapshotObject",    "contents": "snapshot.canvasMode"  }, 
  {   "trigger": "snapshot.clearColor\tSnapshotObject",    "contents": "snapshot.clearColor"  }, 
  {   "trigger": "snapshot.group\tSnapshotObject",    "contents": "snapshot.group"  }, 
  {   "trigger": "snapshot.textureFilter\tSnapshotObject",    "contents": "snapshot.textureFilter"  }, 
  {   "trigger": "snapshot.textureWrapX\tSnapshotObject",    "contents": "snapshot.textureWrapX"  }, 
  {   "trigger": "snapshot.textureWrapY\tSnapshotObject",    "contents": "snapshot.textureWrapY"  }, 
  {   "trigger": "invalidate()\tSnapshotObject",    "contents": "invalidate( ${1:\"canvas\"} )"  }, 
  {   "trigger": "invalidate()\tSnapshotObject",    "contents": "invalidate( )"  }, 
  {   "trigger": "spellCheckingType\tTextField",    "contents": "spellCheckingType"  }, 
  {   "trigger": "springDampingRatio\tJoint",    "contents": "springDampingRatio"  }, 
  {   "trigger": "springFrequency\tJoint",    "contents": "springFrequency"  }, 
  {   "trigger": "start()\tSpinnerWidget",    "contents": "start( )"  }, 
  {   "trigger": "startRecording()\tRecording",    "contents": "startRecording( )"  }, 
  {   "trigger": "stop()\tSpinnerWidget",    "contents": "stop( )"  }, 
  {   "trigger": "stop()\tWebView",    "contents": "stop( )"  }, 
  {   "trigger": "stopRecording()\tRecording",    "contents": "stopRecording( )"  }, 
  {   "trigger": "store.canLoadProducts\tstore",    "contents": "store.canLoadProducts"  }, 
  {   "trigger": "store.canMakePurchases\tstore",    "contents": "store.canMakePurchases"  }, 
  {   "trigger": "store.finishTransaction()\tstore",    "contents": "store.finishTransaction( ${1:transaction} )"  }, 
  {   "trigger": "store.init()\tstore",    "contents": "store.init( ${1:listener} )"  }, 
  {   "trigger": "store.isActive\tstore",    "contents": "store.isActive"  }, 
  {   "trigger": "store.loadProducts()\tstore",    "contents": "store.loadProducts( ${1:productIdentifiers}, ${2:productListener} )"  }, 
  {   "trigger": "store.purchase()\tstore",    "contents": "store.purchase( ${1:productIdentifiers} )"  }, 
  {   "trigger": "store.restore()\tstore",    "contents": "store.restore( )"  }, 
  {   "trigger": "store.target\tstore",    "contents": "store.target"  }, 
  {   "trigger": "string.byte()\tstring",    "contents": "string.byte( ${1:s} ${2:[, i [, j]}, ${3:]} )"  }, 
  {   "trigger": "string.char()\tstring",    "contents": "string.char( ${1:[arg1 [, ...]} )"  }, 
  {   "trigger": "string.ends()\tstring",    "contents": "string.ends( ${1:s}, ${2:suffix} )"  }, 
  {   "trigger": "string.find()\tstring",    "contents": "string.find( ${1:s}, ${2:pattern} ${3:[, init [, plain]}, ${4:]} )"  }, 
  {   "trigger": "string.format()\tstring",    "contents": "string.format( ${1:formatstring} ${2:[, ...]} )"  }, 
  {   "trigger": "string.gmatch()\tstring",    "contents": "string.gmatch( ${1:s}, ${2:pattern} )"  }, 
  {   "trigger": "string.gsub()\tstring",    "contents": "string.gsub( ${1:s}, ${2:pattern}, ${3:repl} ${4:[, n]} )"  }, 
  {   "trigger": "string.len()\tstring",    "contents": "string.len( ${1:s} )"  }, 
  {   "trigger": "string.lower()\tstring",    "contents": "string.lower( ${1:s} )"  }, 
  {   "trigger": "string.match()\tstring",    "contents": "string.match( ${1:s}, ${2:pattern} ${3:[, init]} )"  }, 
  {   "trigger": "string.rep()\tstring",    "contents": "string.rep( ${1:s}, ${2:n} )"  }, 
  {   "trigger": "string.reverse()\tstring",    "contents": "string.reverse( ${1:s} )"  }, 
  {   "trigger": "string.starts()\tstring",    "contents": "string.starts( ${1:s}, ${2:prefix} )"  }, 
  {   "trigger": "string.sub()\tstring",    "contents": "string.sub( ${1:s}, ${2:i} ${3:[, j]} )"  }, 
  {   "trigger": "string.upper()\tstring",    "contents": "string.upper( ${1:s} )"  }, 
  {   "trigger": "stroke\tShapeObject",    "contents": "stroke"  }, 
  {   "trigger": "strokeWidth\tShapeObject",    "contents": "strokeWidth"  }, 
  {   "trigger": "system.ApplicationSupportDirectory\tsystem",    "contents": "system.ApplicationSupportDirectory"  }, 
  {   "trigger": "system.CachesDirectory\tsystem",    "contents": "system.CachesDirectory"  }, 
  {   "trigger": "system.DocumentsDirectory\tsystem",    "contents": "system.DocumentsDirectory"  }, 
  {   "trigger": "system.ResourceDirectory\tsystem",    "contents": "system.ResourceDirectory"  }, 
  {   "trigger": "system.TemporaryDirectory\tsystem",    "contents": "system.TemporaryDirectory"  }, 
  {   "trigger": "system.activate()\tsystem",    "contents": "system.activate( ${1:feature} )"  }, 
  {   "trigger": "system.canOpenURL()\tsystem",    "contents": "system.canOpenURL( ${1:url} )"  }, 
  {   "trigger": "system.cancelNotification()\tsystem",    "contents": "system.cancelNotification( )"  }, 
  {   "trigger": "system.deactivate()\tsystem",    "contents": "system.deactivate( ${1:feature} )"  }, 
  {   "trigger": "system.deletePreferences()\tsystem",    "contents": "system.deletePreferences( ${1:category}, ${2:preferenceNames} )"  }, 
  {   "trigger": "system.getIdleTimer()\tsystem",    "contents": "system.getIdleTimer( )"  }, 
  {   "trigger": "system.getInfo()\tsystem",    "contents": "system.getInfo( ${1:property} )"  }, 
  {   "trigger": "system.getInputDevices()\tsystem",    "contents": "system.getInputDevices( )"  }, 
  {   "trigger": "system.getPreference()\tsystem",    "contents": "system.getPreference( ${1:category}, ${2:name} ${3:[, type]} )"  }, 
  {   "trigger": "system.getTimer()\tsystem",    "contents": "system.getTimer( )"  }, 
  {   "trigger": "system.hasEventSource()\tsystem",    "contents": "system.hasEventSource( ${1:eventName} )"  }, 
  {   "trigger": "system.newEventDispatcher()\tsystem",    "contents": "system.newEventDispatcher( )"  }, 
  {   "trigger": "system.openURL()\tsystem",    "contents": "system.openURL( ${1:url} )"  }, 
  {   "trigger": "system.orientation\tsystem",    "contents": "system.orientation"  }, 
  {   "trigger": "system.pathForFile()\tsystem",    "contents": "system.pathForFile( ${1:filename} ${2:[, baseDirectory]} )"  }, 
  {   "trigger": "system.scheduleNotification()\tsystem",    "contents": "system.scheduleNotification( )"  }, 
  {   "trigger": "system.setAccelerometerInterval()\tsystem",    "contents": "system.setAccelerometerInterval( ${1:frequency} )"  }, 
  {   "trigger": "system.setGyroscopeInterval()\tsystem",    "contents": "system.setGyroscopeInterval( ${1:frequency} )"  }, 
  {   "trigger": "system.setIdleTimer()\tsystem",    "contents": "system.setIdleTimer( ${1:enabled} )"  }, 
  {   "trigger": "system.setLocationAccuracy()\tsystem",    "contents": "system.setLocationAccuracy( ${1:distance} )"  }, 
  {   "trigger": "system.setLocationThreshold()\tsystem",    "contents": "system.setLocationThreshold( ${1:distance} )"  }, 
  {   "trigger": "system.setPreferences()\tsystem",    "contents": "system.setPreferences( ${1:category}, ${2:preferences} )"  }, 
  {   "trigger": "system.setTapDelay()\tsystem",    "contents": "system.setTapDelay( ${1:delayTime} )"  }, 
  {   "trigger": "system.vibrate()\tsystem",    "contents": "system.vibrate( )"  }, 
  {   "trigger": "table.concat()\ttable",    "contents": "table.concat( ${1:t} )"  }, 
  {   "trigger": "table.concat()\ttable",    "contents": "table.concat( ${1:t}, ${2:sep} )"  }, 
  {   "trigger": "table.concat()\ttable",    "contents": "table.concat( ${1:t}, ${2:sep}, ${3:i} )"  }, 
  {   "trigger": "table.concat()\ttable",    "contents": "table.concat( ${1:t}, ${2:sep}, ${3:i}, ${4:j} )"  }, 
  {   "trigger": "table.copy()\ttable",    "contents": "table.copy( ${1:t} )"  }, 
  {   "trigger": "table.copy()\ttable",    "contents": "table.copy( ${1:t}, ${2:...} )"  }, 
  {   "trigger": "table.indexOf()\ttable",    "contents": "table.indexOf( ${1:t}, ${2:element} )"  }, 
  {   "trigger": "table.insert()\ttable",    "contents": "table.insert( ${1:t}, ${2:pos}, ${3:value} )"  }, 
  {   "trigger": "table.insert()\ttable",    "contents": "table.insert( ${1:t}, ${2:value} )"  }, 
  {   "trigger": "table.maxn()\ttable",    "contents": "table.maxn( ${1:t} )"  }, 
  {   "trigger": "table.remove()\ttable",    "contents": "table.remove( ${1:t} )"  }, 
  {   "trigger": "table.remove()\ttable",    "contents": "table.remove( ${1:t}, ${2:pos} )"  }, 
  {   "trigger": "table.sort()\ttable",    "contents": "table.sort( ${1:array} ${2:[, compare]} )"  }, 
  {   "trigger": "setIsLocked()\tTableViewWidget",    "contents": "setIsLocked( ${1:isLocked} )"  }, 
  {   "trigger": "takeFocus()\tScrollViewWidget",    "contents": "takeFocus( ${1:event} )"  }, 
  {   "trigger": "text\tTextBox",    "contents": "text"  }, 
  {   "trigger": "text\tTextField",    "contents": "text"  }, 
  {   "trigger": "text\tTextObject",    "contents": "text"  }, 
  {   "trigger": "texture.anchorX\tTextureResourceCanvas",    "contents": "texture.anchorX"  }, 
  {   "trigger": "texture.anchorY\tTextureResourceCanvas",    "contents": "texture.anchorY"  }, 
  {   "trigger": "texture.baseDir\tTextureResource",    "contents": "texture.baseDir"  }, 
  {   "trigger": "texture.cache\tTextureResourceCanvas",    "contents": "texture.cache"  }, 
  {   "trigger": "texture.filename\tTextureResource",    "contents": "texture.filename"  }, 
  {   "trigger": "texture.height\tTextureResourceCanvas",    "contents": "texture.height"  }, 
  {   "trigger": "texture.height\tTextureResourceExternal",    "contents": "texture.height"  }, 
  {   "trigger": "texture.pixelHeight\tTextureResourceCanvas",    "contents": "texture.pixelHeight"  }, 
  {   "trigger": "texture.pixelWidth\tTextureResourceCanvas",    "contents": "texture.pixelWidth"  }, 
  {   "trigger": "texture.type\tTextureResource",    "contents": "texture.type"  }, 
  {   "trigger": "texture.width\tTextureResourceCanvas",    "contents": "texture.width"  }, 
  {   "trigger": "texture.width\tTextureResourceExternal",    "contents": "texture.width"  }, 
  {   "trigger": "texture.wrapX\tTextureResourceBitmap",    "contents": "texture.wrapX"  }, 
  {   "trigger": "texture.wrapY\tTextureResourceBitmap",    "contents": "texture.wrapY"  }, 
  {   "trigger": "draw()\tTextureResourceCanvas",    "contents": "draw( ${1:object} )"  }, 
  {   "trigger": "invalidate()\tTextureResourceCanvas",    "contents": "invalidate( ${1:[params]} )"  }, 
  {   "trigger": "invalidate()\tTextureResourceExternal",    "contents": "invalidate( )"  }, 
  {   "trigger": "preload()\tTextureResourceBitmap",    "contents": "preload( )"  }, 
  {   "trigger": "releaseSelf()\tTextureResource",    "contents": "releaseSelf( )"  }, 
  {   "trigger": "setBackground()\tTextureResourceCanvas",    "contents": "setBackground( ${1:gray} )"  }, 
  {   "trigger": "setBackground()\tTextureResourceCanvas",    "contents": "setBackground( ${1:gray}, ${2:alpha} )"  }, 
  {   "trigger": "setBackground()\tTextureResourceCanvas",    "contents": "setBackground( ${1:red}, ${2:green}, ${3:blue} )"  }, 
  {   "trigger": "setBackground()\tTextureResourceCanvas",    "contents": "setBackground( ${1:red}, ${2:green}, ${3:blue}, ${4:alpha} )"  }, 
  {   "trigger": "then\tKeyword",    "contents": "then"  }, 
  {   "trigger": "timeScale\tSpriteObject",    "contents": "timeScale"  }, 
  {   "trigger": "timer.cancel()\ttimer",    "contents": "timer.cancel( ${1:timerID} )"  }, 
  {   "trigger": "timer.cancelAll()\ttimer",    "contents": "timer.cancelAll( )"  }, 
  {   "trigger": "timer.pause()\ttimer",    "contents": "timer.pause( ${1:timerId} )"  }, 
  {   "trigger": "timer.pauseAll()\ttimer",    "contents": "timer.pauseAll( )"  }, 
  {   "trigger": "timer.performWithDelay()\ttimer",    "contents": "timer.performWithDelay( ${1:delay}, ${2:listener} ${3:[, iterations]} )"  }, 
  {   "trigger": "timer.resume()\ttimer",    "contents": "timer.resume( ${1:timerId} )"  }, 
  {   "trigger": "timer.resumeAll()\ttimer",    "contents": "timer.resumeAll( )"  }, 
  {   "trigger": "toBack()\tDisplayObject",    "contents": "toBack( )"  }, 
  {   "trigger": "toFront()\tDisplayObject",    "contents": "toFront( )"  }, 
  {   "trigger": "tonumber()\tglobal",    "contents": "tonumber( ${1:e} ${2:[, base ]} )"  }, 
  {   "trigger": "tostring()\tglobal",    "contents": "tostring( ${1:e} )"  }, 
  {   "trigger": "totalTime\tVideo",    "contents": "totalTime"  }, 
  {   "trigger": "transition.ignoreEmptyReference\ttransition",    "contents": "transition.ignoreEmptyReference"  }, 
  {   "trigger": "transition.blink()\ttransition",    "contents": "transition.blink( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.cancel()\ttransition",    "contents": "transition.cancel( ${1:displayObject} )"  }, 
  {   "trigger": "transition.cancel()\ttransition",    "contents": "transition.cancel( ${1:tagName} )"  }, 
  {   "trigger": "transition.cancel()\ttransition",    "contents": "transition.cancel( ${1:transitionReference} )"  }, 
  {   "trigger": "transition.cancel()\ttransition",    "contents": "transition.cancel( )"  }, 
  {   "trigger": "transition.cancelAll()\ttransition",    "contents": "transition.cancelAll( )"  }, 
  {   "trigger": "transition.dissolve()\ttransition",    "contents": "transition.dissolve( ${1:object1}, ${2:object2}, ${3:time}, ${4:delay} )"  }, 
  {   "trigger": "transition.fadeIn()\ttransition",    "contents": "transition.fadeIn( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.fadeOut()\ttransition",    "contents": "transition.fadeOut( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.from()\ttransition",    "contents": "transition.from( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.moveBy()\ttransition",    "contents": "transition.moveBy( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.moveTo()\ttransition",    "contents": "transition.moveTo( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.pause()\ttransition",    "contents": "transition.pause( ${1:displayObject} )"  }, 
  {   "trigger": "transition.pause()\ttransition",    "contents": "transition.pause( ${1:tagName} )"  }, 
  {   "trigger": "transition.pause()\ttransition",    "contents": "transition.pause( ${1:transitionReference} )"  }, 
  {   "trigger": "transition.pause()\ttransition",    "contents": "transition.pause( )"  }, 
  {   "trigger": "transition.pauseAll()\ttransition",    "contents": "transition.pauseAll( )"  }, 
  {   "trigger": "transition.resume()\ttransition",    "contents": "transition.resume( ${1:displayObject} )"  }, 
  {   "trigger": "transition.resume()\ttransition",    "contents": "transition.resume( ${1:tagName} )"  }, 
  {   "trigger": "transition.resume()\ttransition",    "contents": "transition.resume( ${1:transitionReference} )"  }, 
  {   "trigger": "transition.resume()\ttransition",    "contents": "transition.resume( )"  },
  {   "trigger": "transition.resumeAll()\ttransition",    "contents": "transition.resumeAll( )"  },
  {   "trigger": "transition.scaleBy()\ttransition",    "contents": "transition.scaleBy( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.scaleTo()\ttransition",    "contents": "transition.scaleTo( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "transition.to()\ttransition",    "contents": "transition.to( ${1:target}, ${2:params} )"  }, 
  {   "trigger": "translate()\tDisplayObject",    "contents": "translate( ${1:deltaX}, ${2:deltaY} )"  }, 
  {   "trigger": "true\tKeyword",    "contents": "true"  }, 
  {   "trigger": "type\tInputAxis",    "contents": "type"  }, 
  {   "trigger": "type\tInputDevice",    "contents": "type"  }, 
  {   "trigger": "type()\tglobal",    "contents": "type( ${1:v} )"  }, 
  {   "trigger": "type.Module\ttype",    "contents": "type.Module"  }, 
  {   "trigger": "unpack()\tglobal",    "contents": "unpack( ${1:list} ${2:[, i [, j ]}, ${3:]} )"  }, 
  {   "trigger": "value\tSliderWidget",    "contents": "value"  }, 
  {   "trigger": "value\tStepperWidget",    "contents": "value"  }, 
  {   "trigger": "version\tCoronaLibrary",    "contents": "version"  }, 
  {   "trigger": "vibrate()\tInputDevice",    "contents": "vibrate( )"  }, 
  {   "trigger": "widget.newButton()\twidget",    "contents": "widget.newButton( ${1:options} )"  }, 
  {   "trigger": "widget.newPickerWheel()\twidget",    "contents": "widget.newPickerWheel( ${1:options} )"  }, 
  {   "trigger": "widget.newProgressView()\twidget",    "contents": "widget.newProgressView( ${1:options} )"  }, 
  {   "trigger": "widget.newScrollView()\twidget",    "contents": "widget.newScrollView( ${1:options} )"  }, 
  {   "trigger": "widget.newSegmentedControl()\twidget",    "contents": "widget.newSegmentedControl( ${1:options} )"  }, 
  {   "trigger": "widget.newSlider()\twidget",    "contents": "widget.newSlider( ${1:options} )"  }, 
  {   "trigger": "widget.newSpinner()\twidget",    "contents": "widget.newSpinner( ${1:options} )"  }, 
  {   "trigger": "widget.newStepper()\twidget",    "contents": "widget.newStepper( ${1:options} )"  }, 
  {   "trigger": "widget.newSwitch()\twidget",    "contents": "widget.newSwitch( ${1:options} )"  }, 
  {   "trigger": "widget.newTabBar()\twidget",    "contents": "widget.newTabBar( ${1:options} )"  }, 
  {   "trigger": "widget.newTableView()\twidget",    "contents": "widget.newTableView( ${1:options} )"  }, 
  {   "trigger": "widget.setTheme()\twidget",    "contents": "widget.setTheme( ${1:theme} )"  }, 
  {   "trigger": "width\tDisplayObject",    "contents": "width"  }, 
  {   "trigger": "x\tDisplayObject",    "contents": "x"  }, 
  {   "trigger": "xScale\tDisplayObject",    "contents": "xScale"  }, 
  {   "trigger": "y\tDisplayObject",    "contents": "y"  }, 
  {   "trigger": "yScale\tDisplayObject",    "contents": "yScale"  }
 ]
}
